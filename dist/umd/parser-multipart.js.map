{"version":3,"file":"parser-multipart.js","sources":["../../src/lib/parseHeader.ts","../../node_modules/index-of-newline/dist/esm/index.mjs","../../node_modules/newline-iterator/dist/esm/index.mjs","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["// @ts-ignore\nimport { HeadersObject } from '../index.ts';\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */ export default function newlineIterator(string) {\n    let offset = 0;\n    const iterator = {\n        next () {\n            if (offset >= string.length) return {\n                value: undefined,\n                done: true\n            };\n            let [index, skip] = indexOfNewline(string, offset, true);\n            if (index < 0) {\n                index = string.length;\n                skip = 0;\n            }\n            const line = string.substr(offset, index - offset);\n            offset = index + skip;\n            return {\n                value: line,\n                done: false\n            };\n        }\n    };\n    if (hasIterator) {\n        iterator[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n};\n","import newlineIterator from 'newline-iterator';\n// @ts-ignore\nimport { IParser } from '../index.ts';\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","// @ts-ignore\nimport { Version } from '../index.ts';\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.ts\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === 'OK';\n  return true;\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport type { Version, HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return JSON.parse(this.body);\n  }\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './Response.ts';\n// @ts-ignore\nimport type { HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","// @ts-ignore\nimport Part from './Part.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport type { HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","indexOfNewline","string","offset","includeLength","length","hasIterator","Symbol","iterator","newlineIterator","next","undefined","done","skip","substr","parseText","parser","text","push","statusLine","parseStatus","match","version","major","parseInt","minor","status","statusText","ok","_classCallCheck","ParseStatus","Headers","Body","BodyHeaders","headers","MultipartResponse","contentType","body","_parsingState","lines","parse","join","json","JSON","Response","MultipartPart","response","Parts","MultipartParser","parts","boundaryEnd","boundary","get","split","type","shift","forEach","part","Part"],"mappings":"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"}