{"version":3,"file":"parser-multipart.js","sources":["../../src/lib/parseHeader.ts","../../node_modules/index-of-newline/dist/esm/index.mjs","../../node_modules/newline-iterator/dist/esm/index.mjs","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/ResponseParsed.ts","../../src/lib/BodyHeaders.ts","../../src/ResponseParser.ts","../../src/PartParser.ts","../../src/MultipartParser.ts"],"sourcesContent":["export default function parseHeader(result: Record<string, string>, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */ export default function newlineIterator(string) {\n    let offset = 0;\n    const iterator = {\n        next () {\n            if (offset >= string.length) return {\n                value: undefined,\n                done: true\n            };\n            const args = indexOfNewline(string, offset, true);\n            let index = args[0];\n            let skip = args[1];\n            if (index < 0) {\n                index = string.length;\n                skip = 0;\n            }\n            const line = string.substr(offset, index - offset);\n            offset = index + skip;\n            return {\n                value: line,\n                done: false\n            };\n        }\n    };\n    if (hasIterator) {\n        iterator[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n};\n","import newlineIterator from 'newline-iterator';\n// @ts-ignore\nimport { IParser } from '../index.ts';\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","// @ts-ignore\nimport { Version } from '../index.ts';\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.ts\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = {\n    major: parseInt(match[1], 10),\n    minor: parseInt(match[2], 10),\n  };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === 'OK';\n  return true;\n}\n","// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.js';\n\nexport interface Parser {\n  headers: BodyHeaders;\n  body: string;\n}\n\nexport default class ParsedResponse implements Response {\n  private _parser: Parser;\n  private _bodyUsed: boolean;\n\n  constructor(parser: Parser) {\n    this._parser = parser;\n    this._bodyUsed = false;\n  }\n\n  get type(): ResponseType {\n    return 'default';\n  }\n  get headers() {\n    return new Headers(this._parser.headers.headers as unknown as Record<string, string>);\n  }\n\n  get body(): ReadableStream<Uint8Array> {\n    throw new Error('Not supported: body');\n  }\n\n  get ok() {\n    return this._parser.headers.ok;\n  }\n  get status() {\n    return this._parser.headers.status;\n  }\n  get statusText() {\n    return this._parser.headers.statusText;\n  }\n  get redirected() {\n    return false;\n  }\n  get url() {\n    return '';\n  }\n  clone() {\n    return new ParsedResponse(this._parser);\n  }\n  get bodyUsed() {\n    return this._bodyUsed;\n  }\n\n  text(): Promise<string> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(this._parser.body);\n  }\n\n  json(): Promise<unknown> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(JSON.parse(this._parser.body));\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    throw new Error('Unsupported: arrayBuffer');\n  }\n\n  blob(): Promise<Blob> {\n    throw new Error('Unsupported: blob');\n  }\n\n  formData(): Promise<FormData> {\n    throw new Error('Unsupported: formData');\n  }\n}\n","// @ts-ignore\nimport type { Version } from './types.ts';\n\nexport default class BodyHeaders {\n  version: Version;\n  headers: Record<string, string> = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport ResponseParsed from './ResponseParsed.ts';\n// @ts-ignore\nimport type { Parser } from './ResponseParsed.ts';\n// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return new ResponseParsed(this as Parser);\n  }\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n","// @ts-ignore\nimport Part from './PartParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: Record<string, string> = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | Record<string, string>) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as Record<string, string>)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): MultipartParser {\n    parseText(this, text);\n    return this;\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n\n  get responses(): Response[] {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete parser');\n    return this.parts.map((part) => part.response);\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","indexOfNewline","string","offset","includeLength","length","hasIterator","Symbol","iterator","newlineIterator","next","undefined","done","args","skip","substr","parseText","parser","text","push","statusLine","parseStatus","match","version","major","parseInt","minor","status","statusText","ok","_classCallCheck","ParsedResponse","_parser","_bodyUsed","clone","Promise","resolve","body","json","JSON","parse","arrayBuffer","blob","formData","type","headers","Headers","redirected","url","bodyUsed","BodyHeaders","ParseStatus","Body","MultipartResponse","contentType","_parsingState","lines","join","response","ResponseParsed","Response","MultipartPart","_response","Parts","MultipartParser","parts","boundaryEnd","boundary","get","split","shift","forEach","part","Part","responses","map"],"mappings":"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"}