{"version":3,"file":"parser-multipart.js","sources":["../../src/lib/HeadersPolyfill.ts","../../src/ResponseParsed.ts","../../src/lib/BodyHeaders.ts","../../src/lib/parseHeader.ts","../../src/lib/parseStatus.ts","../../node_modules/index-of-newline/dist/esm/index.mjs","../../node_modules/newline-iterator/dist/esm/index.mjs","../../src/lib/parseText.ts","../../src/ResponseParser.ts","../../src/PartParser.ts","../../src/MultipartParser.ts"],"sourcesContent":["class HeadersPolyfill implements Headers {\n  headers: Record<string, string>;\n\n  constructor(headers) {\n    this.headers = headers;\n  }\n  get(key) {\n    return this.headers[key];\n  }\n  set(key, value) {\n    this.headers[key] = value;\n  }\n  append(key, value) {\n    this.headers[key] = value;\n  }\n  delete(key) {\n    delete this.headers[key];\n  }\n  has(key) {\n    return this.headers[key] === undefined;\n  }\n  forEach(fn) {\n    for (const key in this.headers) fn(this.headers[key]);\n  }\n  getSetCookie(): string[] {\n    throw new Error('Unsupported: getSetCookie');\n  }\n}\n\nexport default typeof Headers === 'undefined' ? HeadersPolyfill : Headers;\n","// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.js';\n// @ts-ignore\nimport HeadersPolyfill from './lib/HeadersPolyfill.ts';\n\nexport interface Parser {\n  headers: BodyHeaders;\n  body: string;\n}\n\nexport default class ParsedResponse implements Response {\n  private _parser: Parser;\n  private _bodyUsed: boolean;\n\n  constructor(parser: Parser) {\n    this._parser = parser;\n    this._bodyUsed = false;\n  }\n\n  get type(): ResponseType {\n    return 'default';\n  }\n  get headers() {\n    return new HeadersPolyfill(this._parser.headers.headers as unknown as Record<string, string>);\n  }\n\n  get body(): ReadableStream<Uint8Array> {\n    throw new Error('Not supported: body');\n  }\n\n  get ok() {\n    return this._parser.headers.ok;\n  }\n  get status() {\n    return this._parser.headers.status;\n  }\n  get statusText() {\n    return this._parser.headers.statusText;\n  }\n  get redirected() {\n    return false;\n  }\n  get url() {\n    return '';\n  }\n  clone() {\n    return new ParsedResponse(this._parser);\n  }\n  get bodyUsed() {\n    return this._bodyUsed;\n  }\n\n  text(): Promise<string> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(this._parser.body);\n  }\n\n  json(): Promise<unknown> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(JSON.parse(this._parser.body));\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    throw new Error('Unsupported: arrayBuffer');\n  }\n\n  blob(): Promise<Blob> {\n    throw new Error('Unsupported: blob');\n  }\n\n  formData(): Promise<FormData> {\n    throw new Error('Unsupported: formData');\n  }\n}\n","// @ts-ignore\nimport type { Version } from './types.ts';\n\nexport default class BodyHeaders {\n  version: Version;\n  headers: Record<string, string> = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n","export default function parseHeader(result: Record<string, string>, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","// @ts-ignore\nimport { Version } from '../index.ts';\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.ts\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = {\n    major: parseInt(match[1], 10),\n    minor: parseInt(match[2], 10),\n  };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === 'OK';\n  return true;\n}\n","/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import indexOfNewline from 'index-of-newline';\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */ export default function newlineIterator(string) {\n    let offset = 0;\n    const iterator = {\n        next () {\n            if (offset >= string.length) return {\n                value: undefined,\n                done: true\n            };\n            const args = indexOfNewline(string, offset, true);\n            let index = args[0];\n            let skip = args[1];\n            if (index < 0) {\n                index = string.length;\n                skip = 0;\n            }\n            const line = string.substr(offset, index - offset);\n            offset = index + skip;\n            return {\n                value: line,\n                done: false\n            };\n        }\n    };\n    if (hasIterator) {\n        iterator[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n};\n","import newlineIterator from 'newline-iterator';\n// @ts-ignore\nimport { IParser } from '../index.ts';\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","// @ts-ignore\nimport ResponseParsed from './ResponseParsed.ts';\n// @ts-ignore\nimport type { Parser } from './ResponseParsed.ts';\n// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body = 2,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return new ResponseParsed(this as Parser);\n  }\n}\n","// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response = 2,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n","// @ts-ignore\nimport Part from './PartParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: Record<string, string> = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | Record<string, string>) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as Record<string, string>)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): MultipartParser {\n    parseText(this, text);\n    return this;\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n\n  get responses(): Response[] {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete parser');\n    return this.parts.map((part) => part.response);\n  }\n}\n"],"names":["HeadersPolyfill","headers","get","key","set","value","append","delete","has","undefined","forEach","fn","getSetCookie","Error","Headers","ParsedResponse","parser","_define_property","_parser","_bodyUsed","type","body","ok","status","statusText","redirected","url","clone","bodyUsed","text","Promise","resolve","json","JSON","parse","arrayBuffer","blob","formData","BodyHeaders","version","parseHeader","result","line","delimiter","index","indexOf","slice","trim","toLowerCase","statusLine","parseStatus","match","major","parseInt","minor","indexOfNewline","string","offset","includeLength","length","hasIterator","Symbol","iterator","newlineIterator","next","done","args","skip","substr","parseText","push","ParseStatus","MultipartResponse","contentType","_parsingState","lines","join","response","ResponseParsed","MultipartPart","_response","MultipartParser","parts","boundaryEnd","boundary","split","shift","part","Part","responses","map"],"mappings":"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"}