{"version":3,"file":"parser-multipart.js","sources":["../../src/lib/parseHeader.ts","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["import { HeadersObject } from \"../index\";\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","import newlineIterator from \"newline-iterator\";\nimport { IParser } from \"../index\";\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","import { Version } from \"../index\";\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.js\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === \"OK\";\n  return true;\n}\n","import parseHeader from \"./lib/parseHeader.js\";\nimport parseStatus from \"./lib/parseStatus.js\";\nimport parseText from \"./lib/parseText.js\";\nimport type { Version, HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error(\"Response missing a content type\");\n    this.contentType = contentType;\n    if (this.contentType === \"application/http\") {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return JSON.parse(this.body);\n  }\n}\n","import parseHeader from \"./lib/parseHeader.js\";\nimport parseText from \"./lib/parseText.js\";\nimport MultipartResponse from \"./Response.js\";\nimport type { HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] === undefined) throw new Error(\"Missing content type\");\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers[\"content-type\"]);\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","import Part from \"./Part.js\";\nimport parseHeader from \"./lib/parseHeader.js\";\nimport parseText from \"./lib/parseText.js\";\nimport type { HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error(\"Headers missing\");\n\n    let contentType: string;\n    if (typeof headers === \"string\") contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get(\"content-type\");\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)[\"content-type\"];\n    if (!contentType) throw Error(\"content-type header not found\");\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf(\"multipart\") !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    for (const part of parts) parseHeader(this.headers, part, \"=\");\n\n    // boundary\n    if (!this.headers.boundary) throw new Error(\"Invalid Content Type: no boundary\");\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed multipart\");\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","parseText","parser","text","iterator","newlineIterator","next","done","push","statusLine","parseStatus","match","version","major","parseInt","minor","status","statusText","ok","ParseStatus","BodyHeaders","MultipartResponse","contentType","Body","lines","undefined","headers","_parsingState","Headers","body","join","length","JSON","parse","MultipartPart","Response","response","MultipartParser","Parts","boundaryEnd","get","parts","split","type","shift","part","boundary","Part"],"mappings":"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"}