{"version":3,"file":"parser-multipart.js","sources":["../../src/lib/parseHeader.ts","../../node_modules/index-of-newline/dist/esm/index.mjs","../../node_modules/newline-iterator/dist/esm/index.mjs","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["// @ts-ignore\nimport { HeadersObject } from '../index.ts';\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string) {\n    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, includeLength = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    if (offset < 0) throw new Error(\"Unexpected negative offset\");\n    if (offset > string.length) throw new Error(\"Offset is longer than the string. Offset: \".concat(offset, \". String: \").concat(string.length));\n    while(offset < string.length){\n        var value = string[offset];\n        if (value === \"\\n\") return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === \"\\r\") {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === \"\\n\" ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nimport indexOfNewline from \"index-of-newline\";\nvar hasIterator = typeof Symbol !== \"undefined\" && Symbol.iterator;\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */ export default function newlineIterator(string) {\n    var offset = 0;\n    var iterator = {\n        next: function next() {\n            if (offset >= string.length) return {\n                value: undefined,\n                done: true\n            };\n            var ref = _slicedToArray(indexOfNewline(string, offset, true), 2), index = ref[0], skip = ref[1];\n            if (index < 0) {\n                index = string.length;\n                skip = 0;\n            }\n            var line = string.substr(offset, index - offset);\n            offset = index + skip;\n            return {\n                value: line,\n                done: false\n            };\n        }\n    };\n    if (hasIterator) {\n        iterator[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n};\n","import newlineIterator from 'newline-iterator';\n// @ts-ignore\nimport { IParser } from '../index.ts';\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","// @ts-ignore\nimport { Version } from '../index.ts';\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.ts\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === 'OK';\n  return true;\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport type { Version, HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return JSON.parse(this.body);\n  }\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './Response.ts';\n// @ts-ignore\nimport type { HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","// @ts-ignore\nimport Part from './Part.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport type { HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","parseText","parser","text","iterator","newlineIterator","next","done","push","statusLine","parseStatus","match","version","major","parseInt","minor","status","statusText","ok","_classCallCheck","ParseStatus","Headers","Body","BodyHeaders","headers","MultipartResponse","contentType","body","_parsingState","lines","undefined","parse","join","length","json","JSON","Response","MultipartPart","response","Parts","MultipartParser","parts","boundaryEnd","boundary","get","split","type","shift","forEach","part","Part"],"mappings":"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"}