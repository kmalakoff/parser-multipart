{"version":3,"file":"parser-multipart.min.js","sources":["../../src/lib/parseHeader.ts","../../node_modules/newline-iterator/dist/esm/index.mjs","../../node_modules/index-of-newline/dist/esm/index.mjs","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/ResponseParsed.ts","../../src/lib/BodyHeaders.ts","../../src/ResponseParser.ts","../../src/PartParser.ts","../../src/MultipartParser.ts"],"sourcesContent":["export default function parseHeader(result: Record<string, string>, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","import indexOfNewline from 'index-of-newline';\nconst hasIterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n/**\n * Create a newline iterator recognizing CR, LF, and CRLF using the Symbol.iterator interface\n *\n * @param string The string to iterate through\n *\n * ```typescript\n * import newlineIterator from \"newline-iterator\";\n *\n * const iterator = newlineIterator(\"some\\r\\nstring\\ncombination\\r\");\n * const results = [];\n * for (const line of iterator) results.push(line);\n * console.log(results); // [\"some\", \"string\", \"combination\"];\n * ```\n */ export default function newlineIterator(string) {\n    let offset = 0;\n    const iterator = {\n        next () {\n            if (offset >= string.length) return {\n                value: undefined,\n                done: true\n            };\n            const args = indexOfNewline(string, offset, true);\n            let index = args[0];\n            let skip = args[1];\n            if (index < 0) {\n                index = string.length;\n                skip = 0;\n            }\n            const line = string.substr(offset, index - offset);\n            offset = index + skip;\n            return {\n                value: line,\n                done: false\n            };\n        }\n    };\n    if (hasIterator) {\n        iterator[Symbol.iterator] = function() {\n            return this;\n        };\n    }\n    return iterator;\n};\n","/**\n * Find indexOf CR, LF, or CRLF\n *\n * @param string The search string\n * @param offset The offset for searching\n * @param includeLength Include the length in the return value\n * @returns When includeLength is true, returns a pair of [offset, length] to provide the length of CR (1), LF (1) or CRLF (2)\n */ export default function indexOfNewline(string, offset = 0, includeLength = false) {\n    if (offset < 0) throw new Error('Unexpected negative offset');\n    if (offset > string.length) throw new Error(`Offset is longer than the string. Offset: ${offset}. String: ${string.length}`);\n    while(offset < string.length){\n        const value = string[offset];\n        if (value === '\\n') return includeLength ? [\n            offset,\n            1\n        ] : offset;\n        else if (value === '\\r') {\n            return includeLength ? [\n                offset,\n                string[offset + 1] === '\\n' ? 2 : 1\n            ] : offset;\n        }\n        offset++;\n    }\n    return includeLength ? [\n        -1,\n        0\n    ] : -1;\n};\n","import newlineIterator from 'newline-iterator';\n// @ts-ignore\nimport { IParser } from '../index.ts';\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","// @ts-ignore\nimport { Version } from '../index.ts';\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.ts\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = {\n    major: parseInt(match[1], 10),\n    minor: parseInt(match[2], 10),\n  };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === 'OK';\n  return true;\n}\n","// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.js';\n\nexport interface Parser {\n  headers: BodyHeaders;\n  body: string;\n}\n\nexport default class ParsedResponse implements Response {\n  private _parser: Parser;\n  private _bodyUsed: boolean;\n\n  constructor(parser: Parser) {\n    this._parser = parser;\n    this._bodyUsed = false;\n  }\n\n  get type(): ResponseType {\n    return 'default';\n  }\n  get headers() {\n    return new Headers(this._parser.headers.headers as unknown as Record<string, string>);\n  }\n\n  get body(): ReadableStream<Uint8Array> {\n    throw new Error('Not supported: body');\n  }\n\n  get ok() {\n    return this._parser.headers.ok;\n  }\n  get status() {\n    return this._parser.headers.status;\n  }\n  get statusText() {\n    return this._parser.headers.statusText;\n  }\n  get redirected() {\n    return false;\n  }\n  get url() {\n    return '';\n  }\n  clone() {\n    return new ParsedResponse(this._parser);\n  }\n  get bodyUsed() {\n    return this._bodyUsed;\n  }\n\n  text(): Promise<string> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(this._parser.body);\n  }\n\n  json(): Promise<unknown> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(JSON.parse(this._parser.body));\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    throw new Error('Unsupported: arrayBuffer');\n  }\n\n  blob(): Promise<Blob> {\n    throw new Error('Unsupported: blob');\n  }\n\n  formData(): Promise<FormData> {\n    throw new Error('Unsupported: formData');\n  }\n}\n","// @ts-ignore\nimport type { Version } from './types.ts';\n\nexport default class BodyHeaders {\n  version: Version;\n  headers: Record<string, string> = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport ResponseParsed from './ResponseParsed.ts';\n// @ts-ignore\nimport type { Parser } from './ResponseParsed.ts';\n// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return new ResponseParsed(this as Parser);\n  }\n}\n","// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n","// @ts-ignore\nimport Part from './PartParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: Record<string, string> = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | Record<string, string>) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as Record<string, string>)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): MultipartParser {\n    parseText(this, text);\n    return this;\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n\n  get responses(): Response[] {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete parser');\n    return this.parts.map((part) => part.response);\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","concat","key","slice","value","trim","toLowerCase","hasIterator","Symbol","iterator","newlineIterator","string","offset","next","length","undefined","done","args","arguments","includeLength","indexOfNewline","skip","substr","this","parseText","parser","text","push","statusLine","ParsedResponse","instance","Constructor","_parser","_bodyUsed","prototype","clone","Promise","resolve","body","json","JSON","parse","arrayBuffer","blob","formData","type","headers","Headers","ok","status","statusText","redirected","url","bodyUsed","ParseStatus","BodyHeaders","Body","MultipartResponse","contentType","_parsingState","lines","join","match","version","major","parseInt","minor","parseStatus","response","ResponseParsed","Response","MultipartPart","_response","Parts","MultipartParser","parts","boundaryEnd","boundary","get","split","shift","forEach","part","_this","Part","responses","map"],"mappings":"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"}