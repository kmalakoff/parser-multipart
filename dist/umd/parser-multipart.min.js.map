{"version":3,"file":"parser-multipart.min.js","sources":["../../src/lib/parseHeader.ts","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["import { HeadersObject } from \"../types\";\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","import newlineIterator from \"newline-iterator\";\nimport { Parser } from \"../types\";\n\nexport default function parseText(parser: Parser, text: string): void {\n  const iterator = newlineIterator(text);\n  for (const line of iterator) parser.push(line);\n  if (!parser.done()) parser.push(null);\n}\n","import { Version } from \"../types\";\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.js\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === \"OK\";\n  return true;\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseStatus from \"./lib/parseStatus\";\nimport parseText from \"./lib/parseText\";\nimport type { Version, HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n  body: string = null;\n\n  // bodyUsed: boolean;\n  // redirected: boolean;\n  // trailer: Promise<Headers>;\n  // type: ResponseType;\n  // url: string;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n    lines: [],\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this, line)) parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    if (this.headers[\"content-type\"].indexOf(\"application/json\") === -1) {\n      throw new Error(`Not json response. Content type: ${this.headers[\"content-type\"]}`);\n    }\n    return JSON.parse(this.body);\n  }\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport MultipartResponse from \"./Response\";\nimport type { HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse = new MultipartResponse();\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] !== \"application/http\")\n          throw new Error(`Unexpected content type: ${this.headers[\"content-type\"]}`);\n        this._parsingState.status = ParseStatus.Response;\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","import Part from \"./Part\";\nimport parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport type { HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error(\"Headers missing\");\n\n    let contentType: string;\n    if (typeof headers === \"string\") contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get(\"content-type\");\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)[\"content-type\"];\n    if (!contentType) throw Error(\"content-type header not found\");\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf(\"multipart\") !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    for (const part of parts) parseHeader(this.headers, part, \"=\");\n\n    // boundary\n    if (!this.headers.boundary) throw new Error(\"Invalid Content Type: no boundary\");\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed multipart\");\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","parseText","parser","text","newlineIterator","push","done","ParseStatus","statusLine","MultipartResponse","status","Headers","lines","this","_parsingState","Body","body","join","length","match","version","major","parseInt","minor","statusText","ok","parseStatus","headers","JSON","parse","MultipartPart","Response","response","MultipartParser","Parts","boundaryEnd","contentType","get","parts","split","type","shift","part","boundary","Part"],"mappings":"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"}