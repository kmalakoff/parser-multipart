{"version":3,"file":"parser-multipart.min.js","sources":["../../src/lib/parseHeader.ts","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["import { HeadersObject } from \"../index\";\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","import newlineIterator from \"newline-iterator\";\nimport { IParser } from \"../index\";\n\nexport default function parseText(parser: IParser, text: string): void {\n  const iterator = newlineIterator(text);\n  let next = iterator.next();\n  while (!next.done) {\n    parser.push(next.value);\n    next = iterator.next();\n  }\n  if (!parser.done()) parser.push(null);\n}\n","import { Version } from \"../index\";\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.js\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === \"OK\";\n  return true;\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseStatus from \"./lib/parseStatus\";\nimport parseText from \"./lib/parseText\";\nimport type { Version, HeadersObject } from \"./index\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error(\"Response missing a content type\");\n    this.contentType = contentType;\n    if (this.contentType === \"application/http\") {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return JSON.parse(this.body);\n  }\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport MultipartResponse from \"./Response\";\nimport type { HeadersObject } from \"./index\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] === undefined) throw new Error(\"Missing content type\");\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers[\"content-type\"]);\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","import Part from \"./Part\";\nimport parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport type { HeadersObject } from \"./index\";\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error(\"Headers missing\");\n\n    let contentType: string;\n    if (typeof headers === \"string\") contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get(\"content-type\");\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)[\"content-type\"];\n    if (!contentType) throw Error(\"content-type header not found\");\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf(\"multipart\") !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    for (const part of parts) parseHeader(this.headers, part, \"=\");\n\n    // boundary\n    if (!this.headers.boundary) throw new Error(\"Invalid Content Type: no boundary\");\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed multipart\");\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","parseText","parser","text","iterator","newlineIterator","next","done","push","ParseStatus","statusLine","BodyHeaders","_createClass","_classCallCheck","this","_defineProperty","MultipartResponse","contentType","status","Body","lines","undefined","headers","_parsingState","Headers","body","join","length","match","version","major","parseInt","minor","statusText","ok","parseStatus","JSON","parse","MultipartPart","Response","response","MultipartParser","Parts","boundaryEnd","get","parts","split","type","shift","_step","_iterator","_createForOfIteratorHelper","s","n","part","err","e","f","boundary","concat","Part"],"mappings":"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"}