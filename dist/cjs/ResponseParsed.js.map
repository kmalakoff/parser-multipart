{"version":3,"sources":["ResponseParsed.ts","<<jsx-config-pragma.js>>"],"sourcesContent":["// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.js';\n// @ts-ignore\nimport HeadersPolyfill from './lib/HeadersPolyfill.ts';\n\nexport interface Parser {\n  headers: BodyHeaders;\n  body: string;\n}\n\nexport default class ParsedResponse implements Response {\n  private _parser: Parser;\n  private _bodyUsed: boolean;\n\n  constructor(parser: Parser) {\n    this._parser = parser;\n    this._bodyUsed = false;\n  }\n\n  get type(): ResponseType {\n    return 'default';\n  }\n  get headers() {\n    return new HeadersPolyfill(this._parser.headers.headers as unknown as Record<string, string>);\n  }\n\n  get body(): ReadableStream<Uint8Array> {\n    throw new Error('Not supported: body');\n  }\n\n  get ok() {\n    return this._parser.headers.ok;\n  }\n  get status() {\n    return this._parser.headers.status;\n  }\n  get statusText() {\n    return this._parser.headers.statusText;\n  }\n  get redirected() {\n    return false;\n  }\n  get url() {\n    return '';\n  }\n  clone() {\n    return new ParsedResponse(this._parser);\n  }\n  get bodyUsed() {\n    return this._bodyUsed;\n  }\n\n  text(): Promise<string> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(this._parser.body);\n  }\n\n  json(): Promise<unknown> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(JSON.parse(this._parser.body));\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    throw new Error('Unsupported: arrayBuffer');\n  }\n\n  blob(): Promise<Blob> {\n    throw new Error('Unsupported: blob');\n  }\n\n  formData(): Promise<FormData> {\n    throw new Error('Unsupported: formData');\n  }\n}\n","React.createElement"],"names":["ParsedResponse","parser","_parser","_bodyUsed","clone","text","Error","Promise","resolve","body","json","JSON","parse","arrayBuffer","blob","formData","type","headers","HeadersPolyfill","ok","status","statusText","redirected","url","bodyUsed"],"mappings":"AAAA,aAAa;AACb;;;;;;;eASqBA,cAAc;;;sEAPP,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;;AAOvC,IAAA,AAAMA,cAAc,iBAApB;;aAAMA,cAAc,CAIrBC,MAAc;;QACxB,IAAI,CAACC,OAAO,GAAGD,MAAM,CAAC;QACtB,IAAI,CAACE,SAAS,GAAG,KAAK,CAAC;;iBANNH,cAAc;IAmCjCI,OAAAA,KAAK,AAEJ,GAFDA,SAAAA,KAAK,GAAG;QACN,OAAO,IAAIJ,cAAc,CAAC,IAAI,CAACE,OAAO,CAAC,CAAC;KACzC;IAKDG,OAAAA,IAAI,AAIH,GAJDA,SAAAA,IAAI,GAAoB;QACtB,IAAI,IAAI,CAACF,SAAS,EAAE,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7D,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;QACtB,OAAOI,OAAO,CAACC,OAAO,CAAC,IAAI,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC;KAC3C;IAEDC,OAAAA,IAAI,AAIH,GAJDA,SAAAA,IAAI,GAAqB;QACvB,IAAI,IAAI,CAACP,SAAS,EAAE,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7D,IAAI,CAACH,SAAS,GAAG,IAAI,CAAC;QACtB,OAAOI,OAAO,CAACC,OAAO,CAACG,IAAI,CAACC,KAAK,CAAC,IAAI,CAACV,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;KACvD;IAEDI,OAAAA,WAAW,AAEV,GAFDA,SAAAA,WAAW,GAAyB;QAClC,MAAM,IAAIP,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC7C;IAEDQ,OAAAA,IAAI,AAEH,GAFDA,SAAAA,IAAI,GAAkB;QACpB,MAAM,IAAIR,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACtC;IAEDS,OAAAA,QAAQ,AAEP,GAFDA,SAAAA,QAAQ,GAAsB;QAC5B,MAAM,IAAIT,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;;;YAvDGU,GAAI,EAAJA,MAAI;iBAAR,eAAyB;gBACvB,OAAO,SAAS,CAAC;aAClB;;;YACGC,GAAO,EAAPA,SAAO;iBAAX,eAAc;gBACZ,OAAO,IAAIC,kBAAe,QAAA,CAAC,IAAI,CAAChB,OAAO,CAACe,OAAO,CAACA,OAAO,CAAsC,CAAC;aAC/F;;;YAEGR,GAAI,EAAJA,MAAI;iBAAR,eAAuC;gBACrC,MAAM,IAAIH,KAAK,CAAC,qBAAqB,CAAC,CAAC;aACxC;;;YAEGa,GAAE,EAAFA,IAAE;iBAAN,eAAS;gBACP,OAAO,IAAI,CAACjB,OAAO,CAACe,OAAO,CAACE,EAAE,CAAC;aAChC;;;YACGC,GAAM,EAANA,QAAM;iBAAV,eAAa;gBACX,OAAO,IAAI,CAAClB,OAAO,CAACe,OAAO,CAACG,MAAM,CAAC;aACpC;;;YACGC,GAAU,EAAVA,YAAU;iBAAd,eAAiB;gBACf,OAAO,IAAI,CAACnB,OAAO,CAACe,OAAO,CAACI,UAAU,CAAC;aACxC;;;YACGC,GAAU,EAAVA,YAAU;iBAAd,eAAiB;gBACf,OAAO,KAAK,CAAC;aACd;;;YACGC,GAAG,EAAHA,KAAG;iBAAP,eAAU;gBACR,OAAO,EAAE,CAAC;aACX;;;YAIGC,GAAQ,EAARA,UAAQ;iBAAZ,eAAe;gBACb,OAAO,IAAI,CAACrB,SAAS,CAAC;aACvB;;;;CAyBF,EAAA"}