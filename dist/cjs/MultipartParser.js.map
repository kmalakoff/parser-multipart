{"version":3,"sources":["MultipartParser.ts"],"sourcesContent":["// @ts-ignore\nimport PartParser from './PartParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: Record<string, string> = {};\n  parts: PartParser[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | Record<string, string>) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as Record<string, string>)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): MultipartParser {\n    parseText(this, text);\n    return this;\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new PartParser());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n\n  get responses(): Response[] {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete parser');\n    return this.parts.map((part) => part.response);\n  }\n}\n"],"names":["MultipartParser","ParseStatus","headers","type","parts","_parsingState","status","boundaryEnd","boundary","Error","contentType","get","split","shift","trim","indexOf","forEach","part","parseHeader","done","parse","text","parseText","push","line","length","PartParser","responses","map","response"],"mappings":"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"}