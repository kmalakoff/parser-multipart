{"version":3,"sources":["PartParser.ts"],"sourcesContent":["// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response = 2,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n"],"names":["MultipartPart","ParseStatus","headers","_response","_parsingState","status","done","parse","text","parseText","push","line","Error","length","undefined","MultipartResponse","parseHeader","response"],"mappings":"AAAA,aAAa;;;;;;;;;;;;;;;;eAgBQA;;;uEAfS;oEAEN;kEAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAEVC;;;GAAAA,gBAAAA;AASG,IAAA,AAAMD,8BAAD,AAAL;;aAAMA;gCAAAA;QACnBE,uBAAAA,WAAkC,CAAC;QACnCC,uBAAAA,aAAAA,KAAAA;QAEA,uBAAQC,iBAAqC;YAC3CC,MAAM;QACR;;kBANmBL;;YAQnBM,KAAAA;mBAAAA,SAAAA;gBACE,OAAO,CAAC,IAAI,CAACF,aAAa;YAC5B;;;YAEAG,KAAAA;mBAAAA,SAAAA,MAAMC,IAAY;gBAChBC,IAAAA,oBAAS,EAAC,IAAI,EAAED;YAClB;;;YAEAE,KAAAA;mBAAAA,SAAAA,KAAKC,IAAY;gBACf,IAAI,CAAC,IAAI,CAACP,aAAa,EAAE,MAAM,IAAIQ,MAAM;gBACzC,IAAID,SAAS,MAAM;oBACjB,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,QAA2B,MAAM,IAAIO,MAAM;oBACxE,IAAI,CAAC,IAAI,CAACT,SAAS,CAACG,IAAI,IAAI,IAAI,CAACH,SAAS,CAACO,IAAI,CAAC;oBAChD,IAAI,CAACN,aAAa,GAAG;oBACrB;gBACF;gBAEA,IAAI,IAAI,CAACA,aAAa,CAACC,MAAM,QAA0B;oBACrD,IAAI,CAACM,KAAKE,MAAM,EAAE;wBAChB,IAAI,IAAI,CAACX,OAAO,CAAC,eAAe,KAAKY,WAAW,MAAM,IAAIF,MAAM;wBAChE,IAAI,CAACR,aAAa,CAACC,MAAM;wBACzB,IAAI,CAACF,SAAS,GAAG,IAAIY,yBAAiB,CAAC,IAAI,CAACb,OAAO,CAAC,eAAe;oBACrE,OAAOc,IAAAA,sBAAW,EAAC,IAAI,CAACd,OAAO,EAAES,MAAM;gBACzC,OAAO,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,QAA2B;oBAC7D,IAAI,CAACF,SAAS,CAACO,IAAI,CAACC;gBACtB;YACF;;;YAEIM,KAAAA;iBAAJ;gBACE,IAAI,IAAI,CAACb,aAAa,EAAE,MAAM,IAAIQ,MAAM;gBACxC,OAAO,IAAI,CAACT,SAAS,CAACc,QAAQ;YAChC;;;WAvCmBjB"}