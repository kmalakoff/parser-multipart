{"version":3,"sources":["PartParser.ts","<<jsx-config-pragma.js>>"],"sourcesContent":["// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n","React.createElement"],"names":["MultipartPart","ParseStatus","Headers","Response","headers","_parsingState","status","done","parse","text","parseText","push","line","Error","_response","length","undefined","MultipartResponse","parseHeader","response"],"mappings":"AAAA,aAAa;AACb;;;;;;;;;;;;;;;eAeqBA,aAAa;;;kEAfV,sBAAsB;gEAExB,oBAAoB;qEAEZ,qBAAqB;;;;;;;;;;;;;;;;;;;;;;;;;IAE5C,WAGN;UAHWC,WAAW;IAAXA,WAAW,CAAXA,WAAW,CACrBC,SAAO,IAAG,CAAC,IAAXA,SAAO;IADGD,WAAW,CAAXA,WAAW,CAErBE,UAAQ,IAARA,CAAQ,IAARA,UAAQ;GAFEF,WAAW,KAAXA,WAAW;AASR,IAAA,AAAMD,aAAa,iBAAnB;;aAAMA,aAAa;;QAChCI,KAAAA,OAAO,GAA2B,EAAE,AAAC,CAAA;QAGrC,KAAQC,aAAa,GAAwB;YAC3CC,MAAM,EAAEL,WAAW,CAACC,OAAO;SAC5B,AAAC,CAAA;;iBANiBF,aAAa;IAQhCO,OAAAA,IAAI,AAEH,GAFDA,SAAAA,IAAI,GAAY;QACd,OAAO,CAAC,IAAI,CAACF,aAAa,CAAC;KAC5B;IAEDG,OAAAA,KAAK,AAEJ,GAFDA,SAAAA,KAAK,CAACC,IAAY,EAAQ;QACxBC,IAAAA,YAAS,QAAA,EAAC,IAAI,EAAED,IAAI,CAAC,CAAC;KACvB;IAEDE,OAAAA,IAAI,AAkBH,GAlBDA,SAAAA,IAAI,CAACC,IAAY,EAAQ;QACvB,IAAI,CAAC,IAAI,CAACP,aAAa,EAAE,MAAM,IAAIQ,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACjF,IAAID,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,KAAKL,WAAW,CAACE,QAAQ,EAAE,MAAM,IAAIU,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpG,IAAI,CAAC,IAAI,CAACC,SAAS,CAACP,IAAI,EAAE,EAAE,IAAI,CAACO,SAAS,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,IAAI,CAACN,aAAa,GAAG,IAAI,CAAC;YAC1B,OAAO;SACR;QAED,IAAI,IAAI,CAACA,aAAa,CAACC,MAAM,KAAKL,WAAW,CAACC,OAAO,EAAE;YACrD,IAAI,CAACU,IAAI,CAACG,MAAM,EAAE;gBAChB,IAAI,IAAI,CAACX,OAAO,CAAC,cAAc,CAAC,KAAKY,SAAS,EAAE,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACxF,IAAI,CAACR,aAAa,CAACC,MAAM,GAAGL,WAAW,CAACE,QAAQ,CAAC;gBACjD,IAAI,CAACW,SAAS,GAAG,IAAIG,iBAAiB,QAAA,CAAC,IAAI,CAACb,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;aACtE,MAAMc,IAAAA,cAAW,QAAA,EAAC,IAAI,CAACd,OAAO,EAAEQ,IAAI,EAAE,GAAG,CAAC,CAAC;SAC7C,MAAM,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,KAAKL,WAAW,CAACE,QAAQ,EAAE;YAC7D,IAAI,CAACW,SAAS,CAACH,IAAI,CAACC,IAAI,CAAC,CAAC;SAC3B;KACF;;;YAEGO,GAAQ,EAARA,UAAQ;iBAAZ,eAAyB;gBACvB,IAAI,IAAI,CAACd,aAAa,EAAE,MAAM,IAAIQ,KAAK,CAAC,sCAAsC,CAAC,CAAC;gBAChF,OAAO,IAAI,CAACC,SAAS,CAACK,QAAQ,CAAC;aAChC;;;;CACF,EAAA"}