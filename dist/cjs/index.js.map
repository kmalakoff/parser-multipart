{"version":3,"file":"index.js","sources":["../../src/lib/parseHeader.ts","../../src/lib/parseText.ts","../../src/lib/parseStatus.ts","../../src/Response.ts","../../src/Part.ts","../../src/Parser.ts"],"sourcesContent":["import { HeadersObject } from \"../types\";\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n","import newlineIterator from \"newline-iterator\";\nimport { Parser } from \"../types\";\n\nexport default function parseText(parser: Parser, text: string): void {\n  const iterator = newlineIterator(text);\n  for (const line of iterator) parser.push(line);\n  if (!parser.done()) parser.push(null);\n}\n","import { Version } from \"../types\";\n\nexport interface StatusResult {\n  version: Version;\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\n// https://github.com/watson/http-headers/blob/master/index.js\nconst statusLine = /^[A-Z]+\\/(\\d)\\.(\\d) (\\d{3}) (.*)$/;\n\nexport default function parseStatus(result: StatusResult, line: string): boolean {\n  const match = line.match(statusLine);\n  if (!match) return false;\n\n  result.version = { major: parseInt(match[1], 10), minor: parseInt(match[2], 10) };\n  result.status = parseInt(match[3], 10);\n  result.statusText = match[4];\n  result.ok = result.statusText === \"OK\";\n  return true;\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseStatus from \"./lib/parseStatus\";\nimport parseText from \"./lib/parseText\";\nimport type { Version, HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n  body: string = null;\n\n  // bodyUsed: boolean;\n  // redirected: boolean;\n  // trailer: Promise<Headers>;\n  // type: ResponseType;\n  // url: string;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n    lines: [],\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this, line)) parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    if (this.headers[\"content-type\"].indexOf(\"application/json\") === -1) {\n      throw new Error(`Not json response. Content type: ${this.headers[\"content-type\"]}`);\n    }\n    return JSON.parse(this.body);\n  }\n}\n","import parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport MultipartResponse from \"./Response\";\nimport type { HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse = new MultipartResponse();\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] !== \"application/http\")\n          throw new Error(`Unexpected content type: ${this.headers[\"content-type\"]}`);\n        this._parsingState.status = ParseStatus.Response;\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","import Part from \"./Part\";\nimport parseHeader from \"./lib/parseHeader\";\nimport parseText from \"./lib/parseText\";\nimport type { HeadersObject } from \"./types\";\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error(\"Headers missing\");\n\n    let contentType: string;\n    if (typeof headers === \"string\") contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get(\"content-type\");\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)[\"content-type\"];\n    if (!contentType) throw Error(\"content-type header not found\");\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf(\"multipart\") !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    for (const part of parts) parseHeader(this.headers, part, \"=\");\n\n    // boundary\n    if (!this.headers.boundary) throw new Error(\"Invalid Content Type: no boundary\");\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed multipart\");\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase","parseText","parser","text","iterator","newlineIterator","push","done","statusLine","parseStatus","match","version","major","parseInt","minor","status","statusText","ok","ParseStatus","MultipartResponse","Headers","lines","_parsingState","Body","body","join","length","headers","JSON","parse","MultipartPart","Response","response","MultipartParser","Parts","boundaryEnd","contentType","get","parts","split","type","shift","part","boundary","Part"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASA,WAAT,CAAqBC,MAArB,EAA4CC,IAA5C,EAA0DC,SAA1D,EAAmF;AAChG,MAAMC,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAaF,SAAb,CAAd;AACA,MAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB,MAAM,IAAIE,KAAJ,qCAAuCJ,IAAvC,EAAN;AAClB,MAAMK,GAAG,GAAGL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcJ,KAAd,CAAZ;AACA,MAAMK,KAAK,GAAGP,IAAI,CAACM,KAAL,CAAWJ,KAAK,GAAG,CAAnB,CAAd;AACAH,EAAAA,MAAM,CAACM,GAAG,CAACG,IAAJ,GAAWC,WAAX,EAAD,CAAN,GAAmCF,KAAK,CAACC,IAAN,EAAnC;AACD;;ACLc,SAASE,SAAT,CAAmBC,MAAnB,EAAmCC,IAAnC,EAAuD;AACpE,MAAMC,QAAQ,GAAGC,mCAAe,CAACF,IAAD,CAAhC;;AADoE,6CAEjDC,QAFiD;AAAA;;AAAA;AAEpE;AAAA,UAAWb,IAAX;AAA6BW,MAAAA,MAAM,CAACI,IAAP,CAAYf,IAAZ;AAA7B;AAFoE;AAAA;AAAA;AAAA;AAAA;;AAGpE,MAAI,CAACW,MAAM,CAACK,IAAP,EAAL,EAAoBL,MAAM,CAACI,IAAP,CAAY,IAAZ;AACrB;;ACED;AACA,IAAME,UAAU,GAAG,mCAAnB;AAEe,SAASC,WAAT,CAAqBnB,MAArB,EAA2CC,IAA3C,EAAkE;AAC/E,MAAMmB,KAAK,GAAGnB,IAAI,CAACmB,KAAL,CAAWF,UAAX,CAAd;AACA,MAAI,CAACE,KAAL,EAAY,OAAO,KAAP;AAEZpB,EAAAA,MAAM,CAACqB,OAAP,GAAiB;AAAEC,IAAAA,KAAK,EAAEC,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAjB;AAAiCI,IAAAA,KAAK,EAAED,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX;AAAhD,GAAjB;AACApB,EAAAA,MAAM,CAACyB,MAAP,GAAgBF,QAAQ,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAxB;AACApB,EAAAA,MAAM,CAAC0B,UAAP,GAAoBN,KAAK,CAAC,CAAD,CAAzB;AACApB,EAAAA,MAAM,CAAC2B,EAAP,GAAY3B,MAAM,CAAC0B,UAAP,KAAsB,IAAlC;AACA,SAAO,IAAP;AACD;;IChBWE,aAAZ;;WAAYA;AAAAA,EAAAA,YAAAA;AAAAA,EAAAA,YAAAA;GAAAA,kBAAAA;;IAUSC;;;;qCAEM;;kCAIV;;2CAQ8B;AAC3CJ,MAAAA,MAAM,EAAEG,aAAW,CAACE,OADuB;AAE3CC,MAAAA,KAAK,EAAE;AAFoC;;;;;WAK7C,gBAAgB;AACd,aAAO,CAAC,KAAKC,aAAb;AACD;;;WAED,eAAMnB,IAAN,EAA0B;AACxBF,MAAAA,SAAS,CAAC,IAAD,EAAOE,IAAP,CAAT;AACD;;;WAED,cAAKZ,IAAL,EAAyB;AACvB,UAAI,CAAC,KAAK+B,aAAV,EAAyB,MAAM,IAAI3B,KAAJ,CAAU,0CAAV,CAAN;;AACzB,UAAIJ,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAI,KAAK+B,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACK,IAA9C,EAAoD,MAAM,IAAI5B,KAAJ,CAAU,0BAAV,CAAN;AACpD,aAAK6B,IAAL,GAAY,KAAKF,aAAL,CAAmBD,KAAnB,CAAyBI,IAAzB,CAA8B,MAA9B,CAAZ;AACA,aAAKH,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAI,KAAKA,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACE,OAA9C,EAAuD;AACrD,YAAI,CAAC7B,IAAI,CAACmC,MAAV,EAAkB,KAAKJ,aAAL,CAAmBP,MAAnB,GAA4BG,aAAW,CAACK,IAAxC,CAAlB,KACK,IAAI,CAACd,WAAW,CAAC,IAAD,EAAOlB,IAAP,CAAhB,EAA8BF,WAAW,CAAC,KAAKsC,OAAN,EAAepC,IAAf,EAAqB,GAArB,CAAX;AACpC,OAHD,MAGO,IAAI,KAAK+B,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACK,IAA9C,EAAoD;AACzD,YAAI,CAAChC,IAAI,CAACmC,MAAV,EAAkB,KAAKpB,IAAL,CAAU,IAAV,EAAlB,KACK,KAAKgB,aAAL,CAAmBD,KAAnB,CAAyBf,IAAzB,CAA8Bf,IAA9B;AACN;AACF;;;WAED,gBAAe;AACb,UAAI,KAAK+B,aAAT,EAAwB,MAAM,IAAI3B,KAAJ,CAAU,0CAAV,CAAN;AACxB,aAAO,KAAK6B,IAAZ;AACD;;;WAED,gBAAgB;AACd,UAAI,KAAKF,aAAT,EAAwB,MAAM,IAAI3B,KAAJ,CAAU,0CAAV,CAAN;;AACxB,UAAI,KAAKgC,OAAL,CAAa,cAAb,EAA6BjC,OAA7B,CAAqC,kBAArC,MAA6D,CAAC,CAAlE,EAAqE;AACnE,cAAM,IAAIC,KAAJ,4CAA8C,KAAKgC,OAAL,CAAa,cAAb,CAA9C,EAAN;AACD;;AACD,aAAOC,IAAI,CAACC,KAAL,CAAW,KAAKL,IAAhB,CAAP;AACD;;;;;;IClESN,aAAZ;;WAAYA;AAAAA,EAAAA,YAAAA;AAAAA,EAAAA,YAAAA;GAAAA,kBAAAA;;IASSY;;;;qCACM;;sCACK,IAAIX,iBAAJ;;2CAEe;AAC3CJ,MAAAA,MAAM,EAAEG,aAAW,CAACE;AADuB;;;;;WAI7C,gBAAgB;AACd,aAAO,CAAC,KAAKE,aAAb;AACD;;;WAED,eAAMnB,IAAN,EAA0B;AACxBF,MAAAA,SAAS,CAAC,IAAD,EAAOE,IAAP,CAAT;AACD;;;WAED,cAAKZ,IAAL,EAAyB;AACvB,UAAI,CAAC,KAAK+B,aAAV,EAAyB,MAAM,IAAI3B,KAAJ,CAAU,sCAAV,CAAN;;AACzB,UAAIJ,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAI,KAAK+B,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACa,QAA9C,EAAwD,MAAM,IAAIpC,KAAJ,CAAU,0BAAV,CAAN;AACxD,YAAI,CAAC,KAAKqC,QAAL,CAAczB,IAAd,EAAL,EAA2B,KAAKyB,QAAL,CAAc1B,IAAd,CAAmB,IAAnB;AAC3B,aAAKgB,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAI,KAAKA,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACE,OAA9C,EAAuD;AACrD,YAAI,CAAC7B,IAAI,CAACmC,MAAV,EAAkB;AAChB,cAAI,KAAKC,OAAL,CAAa,cAAb,MAAiC,kBAArC,EACE,MAAM,IAAIhC,KAAJ,oCAAsC,KAAKgC,OAAL,CAAa,cAAb,CAAtC,EAAN;AACF,eAAKL,aAAL,CAAmBP,MAAnB,GAA4BG,aAAW,CAACa,QAAxC;AACD,SAJD,MAIO1C,WAAW,CAAC,KAAKsC,OAAN,EAAepC,IAAf,EAAqB,GAArB,CAAX;AACR,OAND,MAMO,IAAI,KAAK+B,aAAL,CAAmBP,MAAnB,KAA8BG,aAAW,CAACa,QAA9C,EAAwD;AAC7D,aAAKC,QAAL,CAAc1B,IAAd,CAAmBf,IAAnB;AACD;AACF;;;;;;IC3CS2B,WAAZ;;WAAYA;AAAAA,EAAAA,YAAAA;GAAAA,gBAAAA;;IASSe;AAWnB,2BAAYN,OAAZ,EAAuD;AAAA;;AAAA,qCAT9B,EAS8B;;AAAA,mCARvC,EAQuC;;AAAA,2CANV;AAC3CZ,MAAAA,MAAM,EAAEG,WAAW,CAACgB,KADuB;AAE3CC,MAAAA,WAAW,EAAE;AAF8B,KAMU;;AAAA,sCAFrB,IAEqB;;AACrD,QAAI,CAACR,OAAL,EAAc,MAAM,IAAIhC,KAAJ,CAAU,iBAAV,CAAN;AAEd,QAAIyC,WAAJ;AACA,QAAI,OAAOT,OAAP,KAAmB,QAAvB,EAAiCS,WAAW,GAAGT,OAAd;AACjC;AADA,SAC2B,IAAIA,OAAO,CAACU,GAAZ,EAAiBD,WAAW,GAAIT,OAAD,CAAqBU,GAArB,CAAyB,cAAzB,CAAd;AAC5C;AAD2B,SACDD,WAAW,GAAIT,OAAD,CAA2B,cAA3B,CAAd;AAC1B,QAAI,CAACS,WAAL,EAAkB,MAAMzC,KAAK,CAAC,+BAAD,CAAX;AAElB,QAAM2C,KAAK,GAAGF,WAAW,CAACG,KAAZ,CAAkB,IAAlB,CAAd;AACA,SAAKC,IAAL,GAAYF,KAAK,CAACG,KAAN,GAAc1C,IAAd,EAAZ;;AACA,QAAI,KAAKyC,IAAL,CAAU9C,OAAV,CAAkB,WAAlB,MAAmC,CAAvC,EAA0C;AACxC,YAAM,IAAIC,KAAJ,iDAAmDyC,WAAnD,EAAN;AACD;;AAboD,+CAclCE,KAdkC;AAAA;;AAAA;AAcrD;AAAA,YAAWI,IAAX;AAA0BrD,QAAAA,WAAW,CAAC,KAAKsC,OAAN,EAAee,IAAf,EAAqB,GAArB,CAAX;AAA1B,OAdqD;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBrD,QAAI,CAAC,KAAKf,OAAL,CAAagB,QAAlB,EAA4B,MAAM,IAAIhD,KAAJ,CAAU,mCAAV,CAAN;AAC5B,SAAKgD,QAAL,eAAqB,KAAKhB,OAAL,CAAagB,QAAlC;AACA,SAAKrB,aAAL,CAAmBa,WAAnB,eAAsC,KAAKR,OAAL,CAAagB,QAAnD;AACA,SAAKrB,aAAL,CAAmBP,MAAnB,GAA4BG,WAAW,CAACgB,KAAxC;AACD;;;;WAED,gBAAgB;AACd,aAAO,CAAC,KAAKZ,aAAb;AACD;;;WAED,eAAMnB,IAAN,EAA0B;AACxBF,MAAAA,SAAS,CAAC,IAAD,EAAOE,IAAP,CAAT;AACD;;;WAED,cAAKZ,IAAL,EAAyB;AACvB,UAAMmD,IAAI,GAAG,KAAKJ,KAAL,CAAWZ,MAAX,GAAoB,KAAKY,KAAL,CAAW,KAAKA,KAAL,CAAWZ,MAAX,GAAoB,CAA/B,CAApB,GAAwD,IAArE;AAEA,UAAI,CAAC,KAAKJ,aAAV,EAAyB,MAAM,IAAI3B,KAAJ,CAAU,2CAAV,CAAN;;AACzB,UAAIJ,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAImD,IAAI,IAAI,CAACA,IAAI,CAACnC,IAAL,EAAb,EAA0BmC,IAAI,CAACpC,IAAL,CAAU,IAAV;AAC1B,aAAKgB,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAI/B,IAAI,KAAK,KAAK+B,aAAL,CAAmBa,WAAhC,EAA6C,KAAK7B,IAAL,CAAU,IAAV,EAA7C,KACK,IAAIf,IAAI,KAAK,KAAKoD,QAAlB,EAA4B;AAC/B,YAAID,IAAI,IAAI,CAACA,IAAI,CAACnC,IAAL,EAAb,EAA0BmC,IAAI,CAACpC,IAAL,CAAU,IAAV;AAC1B,aAAKgC,KAAL,CAAWhC,IAAX,CAAgB,IAAIsC,aAAJ,EAAhB;AACD,OAHI,MAGE,IAAIF,IAAJ,EAAUA,IAAI,CAACpC,IAAL,CAAUf,IAAV,EAAV,KACF;AACH,YAAIA,IAAI,CAACmC,MAAT,EAAiB,MAAM,IAAI/B,KAAJ,4BAA8BJ,IAA9B,EAAN;AAClB;AACF;;;;;;;;;;"}