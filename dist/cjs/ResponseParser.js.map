{"version":3,"sources":["ResponseParser.ts"],"sourcesContent":["// @ts-ignore\nimport ResponseParsed from './ResponseParsed.ts';\n// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body = 2,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return new ResponseParsed(this);\n  }\n}\n"],"names":["MultipartResponse","ParseStatus","contentType","headers","body","_parsingState","status","lines","undefined","Error","BodyHeaders","done","parse","text","parseText","push","line","join","length","parseStatus","parseHeader","response","ResponseParsed"],"mappings":"AAAA,aAAa;;;;;;;;;;;;;;;;eAqBQA;;;uEApBM;oEAEH;oEAEA;oEAEA;kEAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAEVC;;;GAAAA,gBAAAA;AAUG,IAAA,AAAMD,kCAAD,AAAL;;aAAMA,kBAUPE,WAAmB;gCAVZF;QACnBE,uBAAAA,eAAAA,KAAAA;QACAC,uBAAAA,WAAuB;QACvBC,uBAAAA,QAAe;QAEf,uBAAQC,iBAAqC;YAC3CC,MAAM;YACNC,OAAO,EAAE;QACX;QAGE,IAAIL,gBAAgBM,WAAW,MAAM,IAAIC,MAAM;QAC/C,IAAI,CAACP,WAAW,GAAGA;QACnB,IAAI,IAAI,CAACA,WAAW,KAAK,oBAAoB;YAC3C,IAAI,CAACC,OAAO,GAAG,IAAIO,sBAAW;YAC9B,IAAI,CAACL,aAAa,CAACC,MAAM;QAC3B;;kBAhBiBN;;YAmBnBW,KAAAA;mBAAAA,SAAAA;gBACE,OAAO,CAAC,IAAI,CAACN,aAAa;YAC5B;;;YAEAO,KAAAA;mBAAAA,SAAAA,MAAMC,IAAY;gBAChBC,IAAAA,oBAAS,EAAC,IAAI,EAAED;YAClB;;;YAEAE,KAAAA;mBAAAA,SAAAA,KAAKC,IAAY;gBACf,IAAI,CAAC,IAAI,CAACX,aAAa,EAAE,MAAM,IAAII,MAAM;gBACzC,IAAIO,SAAS,MAAM;oBACjB,IAAI,IAAI,CAACX,aAAa,CAACC,MAAM,QAAuB,MAAM,IAAIG,MAAM;oBACpE,IAAI,CAACL,IAAI,GAAG,IAAI,CAACC,aAAa,CAACE,KAAK,CAACU,IAAI,CAAC;oBAC1C,IAAI,CAACZ,aAAa,GAAG;oBACrB;gBACF;gBAEA,IAAI,IAAI,CAACA,aAAa,CAACC,MAAM,QAA0B;oBACrD,IAAI,CAACU,KAAKE,MAAM,EAAE,IAAI,CAACb,aAAa,CAACC,MAAM;yBACtC,IAAI,CAACa,IAAAA,sBAAW,EAAC,IAAI,CAAChB,OAAO,EAAEa,OAAOI,IAAAA,sBAAW,EAAC,IAAI,CAACjB,OAAO,CAACA,OAAO,EAAEa,MAAM;gBACrF,OAAO,IAAI,IAAI,CAACX,aAAa,CAACC,MAAM,QAAuB;oBACzD,IAAI,CAACU,KAAKE,MAAM,EAAE,IAAI,CAACH,IAAI,CAAC;yBACvB,IAAI,CAACV,aAAa,CAACE,KAAK,CAACQ,IAAI,CAACC;gBACrC;YACF;;;YAEIK,KAAAA;iBAAJ;gBACE,IAAI,IAAI,CAAChB,aAAa,EAAE,MAAM,IAAII,MAAM;gBACxC,OAAO,IAAIa,yBAAc,CAAC,IAAI;YAChC;;;WAhDmBtB"}