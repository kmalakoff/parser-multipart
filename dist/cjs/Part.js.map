{"version":3,"sources":["Part.ts","Response.ts"],"sourcesContent":["import parseHeader from './lib/parseHeader.js';\nimport parseText from './lib/parseText.js';\nimport MultipartResponse from './Response.js';\nimport type { HeadersObject } from './index.js';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n","import parseHeader from './lib/parseHeader.js';\nimport parseStatus from './lib/parseStatus.js';\nimport parseText from './lib/parseText.js';\nimport type { Version, HeadersObject } from './index.js';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return JSON.parse(this.body);\n  }\n}\n"],"names":["ParseStatus","Headers","Response","MultipartPart","headers","_parsingState","status","done","parse","text","parseText","push","line","Error","response","length","undefined","MultipartResponse","parseHeader"],"mappings":"AAAA;;;;;AAAwB,IAAA,cAAsB,kCAAtB,sBAAsB,EAAA;AACxB,IAAA,YAAoB,kCAApB,oBAAoB,EAAA;AACZ,IAAA,WAAe,kCAAf,eAAe,EAAA;;;;;;;;;;;IAGtC,WAGN;;UAHWA,WAAW;IAAXA,WAAW,CAAXA,WAAW,CACrBC,SAAO,IAAG,CAAC,IAAXA,SAAO;IADGD,WAAW,CAAXA,WAAW,CAErBE,UAAQ,IAARA,CAAQ,IAARA,UAAQ;GAFEF,WAAW,2BAAXA,WAAW;AASR,IAAA,AAAMG,aAAa,iBCd/B,ADcY;;aAAMA,aAAa;;QAChCC,KAAAA,OAAO,GAAkB,EAAE,AAAC,CAAA;QAG5B,KAAQC,aAAa,GAAwB;YAC3CC,MAAM,EAAEN,WAAW,CAACC,OAAO;SAC5B,AAAC,CAAA;;iBANiBE,aAAa;IAQhCI,OAAAA,IAAI,AAEH,GAFDA,SAAAA,IAAI,GAAY;QACd,OAAO,CAAC,IAAI,CAACF,aAAa,CAAC;KAC5B;IAEDG,OAAAA,KAAK,AAEJ,GAFDA,SAAAA,KAAK,CAACC,IAAY,EAAQ;QACxBC,CAAAA,GAAAA,YAAS,AAAY,CAAA,QAAZ,CAAC,IAAI,EAAED,IAAI,CAAC,CAAC;KACvB;IAEDE,OAAAA,IAAI,AAkBH,GAlBDA,SAAAA,IAAI,CAACC,IAAY,EAAQ;QACvB,IAAI,CAAC,IAAI,CAACP,aAAa,EAAE,MAAM,IAAIQ,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACjF,IAAID,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,KAAKN,WAAW,CAACE,QAAQ,EAAE,MAAM,IAAIW,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpG,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACP,IAAI,EAAE,EAAE,IAAI,CAACO,QAAQ,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,IAAI,CAACN,aAAa,GAAG,IAAI,CAAC;YAC1B,OAAO;SACR;QAED,IAAI,IAAI,CAACA,aAAa,CAACC,MAAM,KAAKN,WAAW,CAACC,OAAO,EAAE;YACrD,IAAI,CAACW,IAAI,CAACG,MAAM,EAAE;gBAChB,IAAI,IAAI,CAACX,OAAO,CAAC,cAAc,CAAC,KAAKY,SAAS,EAAE,MAAM,IAAIH,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACxF,IAAI,CAACR,aAAa,CAACC,MAAM,GAAGN,WAAW,CAACE,QAAQ,CAAC;gBACjD,IAAI,CAACY,QAAQ,GAAG,IAAIG,WAAiB,QAAA,CAAC,IAAI,CAACb,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;aACrE,MAAMc,CAAAA,GAAAA,cAAW,AAAyB,CAAA,QAAzB,CAAC,IAAI,CAACd,OAAO,EAAEQ,IAAI,EAAE,GAAG,CAAC,CAAC;SAC7C,MAAM,IAAI,IAAI,CAACP,aAAa,CAACC,MAAM,KAAKN,WAAW,CAACE,QAAQ,EAAE;YAC7D,IAAI,CAACY,QAAQ,CAACH,IAAI,CAACC,IAAI,CAAC,CAAC;SAC1B;KACF;;CACF,EAAA;kBAnCoBT,aAAa"}