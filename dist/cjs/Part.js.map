{"version":3,"sources":["../../src/Part.ts"],"names":["ParseStatus","MultipartPart","MultipartResponse","status","Headers","_parsingState","text","line","Error","Response","response","done","push","length","headers"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAGYA,W;;;WAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,2BAAAA,W;;IASSC,a;;;;qCACM,E;;sCACK,IAAIC,oBAAJ,E;;2CAEe;AAC3CC,MAAAA,MAAM,EAAEH,WAAW,CAACI;AADuB,K;;;;;WAI7C,gBAAgB;AACd,aAAO,CAAC,KAAKC,aAAb;AACD;;;WAED,eAAMC,IAAN,EAA0B;AACxB,iCAAU,IAAV,EAAgBA,IAAhB;AACD;;;WAED,cAAKC,IAAL,EAAyB;AACvB,UAAI,CAAC,KAAKF,aAAV,EAAyB,MAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;;AACzB,UAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAI,KAAKF,aAAL,CAAmBF,MAAnB,KAA8BH,WAAW,CAACS,QAA9C,EAAwD,MAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACxD,YAAI,CAAC,KAAKE,QAAL,CAAcC,IAAd,EAAL,EAA2B,KAAKD,QAAL,CAAcE,IAAd,CAAmB,IAAnB;AAC3B,aAAKP,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAI,KAAKA,aAAL,CAAmBF,MAAnB,KAA8BH,WAAW,CAACI,OAA9C,EAAuD;AACrD,YAAI,CAACG,IAAI,CAACM,MAAV,EAAkB;AAChB,cAAI,KAAKC,OAAL,CAAa,cAAb,MAAiC,kBAArC,EACE,MAAM,IAAIN,KAAJ,oCAAsC,KAAKM,OAAL,CAAa,cAAb,CAAtC,EAAN;AACF,eAAKT,aAAL,CAAmBF,MAAnB,GAA4BH,WAAW,CAACS,QAAxC;AACD,SAJD,MAIO,6BAAY,KAAKK,OAAjB,EAA0BP,IAA1B,EAAgC,GAAhC;AACR,OAND,MAMO,IAAI,KAAKF,aAAL,CAAmBF,MAAnB,KAA8BH,WAAW,CAACS,QAA9C,EAAwD;AAC7D,aAAKC,QAAL,CAAcE,IAAd,CAAmBL,IAAnB;AACD;AACF","sourcesContent":["import parseHeader from \"./lib/parseHeader.js\";\nimport parseText from \"./lib/parseText.js\";\nimport MultipartResponse from \"./Response.js\";\nimport type { HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse = new MultipartResponse();\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] !== \"application/http\")\n          throw new Error(`Unexpected content type: ${this.headers[\"content-type\"]}`);\n        this._parsingState.status = ParseStatus.Response;\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n"],"file":"Part.js"}