{"version":3,"sources":["Response.ts","Parser.ts"],"sourcesContent":["import parseHeader from './lib/parseHeader.js';\nimport parseStatus from './lib/parseStatus.js';\nimport parseText from './lib/parseText.js';\nimport type { Version, HeadersObject } from './index.js';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return JSON.parse(this.body);\n  }\n}\n","import Part from './Part.js';\nimport parseHeader from './lib/parseHeader.js';\nimport parseText from './lib/parseText.js';\nimport type { HeadersObject } from './index.js';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"names":["ParseStatus","Headers","Body","BodyHeaders","headers","MultipartResponse","contentType","body","_parsingState","status","lines","undefined","Error","done","parse","text","parseText","push","line","join","length","parseStatus","parseHeader","json","JSON"],"mappings":"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"}