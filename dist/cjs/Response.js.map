{"version":3,"sources":["../../src/Response.ts"],"names":["ParseStatus","MultipartResponse","status","Headers","lines","_parsingState","text","line","Error","Body","body","join","length","headers","push","indexOf","JSON","parse"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAGYA,W;;;WAAAA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,2BAAAA,W;;IAUSC,iB;;;;;;qCAEM,E;;;;;;;;kCAIV,I;;2CAQ8B;AAC3CC,MAAAA,MAAM,EAAEF,WAAW,CAACG,OADuB;AAE3CC,MAAAA,KAAK,EAAE;AAFoC,K;;;;;WAK7C,gBAAgB;AACd,aAAO,CAAC,KAAKC,aAAb;AACD;;;WAED,eAAMC,IAAN,EAA0B;AACxB,iCAAU,IAAV,EAAgBA,IAAhB;AACD;;;WAED,cAAKC,IAAL,EAAyB;AACvB,UAAI,CAAC,KAAKF,aAAV,EAAyB,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;;AACzB,UAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAI,KAAKF,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACS,IAA9C,EAAoD,MAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACpD,aAAKE,IAAL,GAAY,KAAKL,aAAL,CAAmBD,KAAnB,CAAyBO,IAAzB,CAA8B,MAA9B,CAAZ;AACA,aAAKN,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAI,KAAKA,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACG,OAA9C,EAAuD;AACrD,YAAI,CAACI,IAAI,CAACK,MAAV,EAAkB,KAAKP,aAAL,CAAmBH,MAAnB,GAA4BF,WAAW,CAACS,IAAxC,CAAlB,KACK,IAAI,CAAC,6BAAY,IAAZ,EAAkBF,IAAlB,CAAL,EAA8B,6BAAY,KAAKM,OAAjB,EAA0BN,IAA1B,EAAgC,GAAhC;AACpC,OAHD,MAGO,IAAI,KAAKF,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACS,IAA9C,EAAoD;AACzD,YAAI,CAACF,IAAI,CAACK,MAAV,EAAkB,KAAKE,IAAL,CAAU,IAAV,EAAlB,KACK,KAAKT,aAAL,CAAmBD,KAAnB,CAAyBU,IAAzB,CAA8BP,IAA9B;AACN;AACF;;;WAED,gBAAe;AACb,UAAI,KAAKF,aAAT,EAAwB,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACxB,aAAO,KAAKE,IAAZ;AACD;;;WAED,gBAAgB;AACd,UAAI,KAAKL,aAAT,EAAwB,MAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;;AACxB,UAAI,KAAKK,OAAL,CAAa,cAAb,EAA6BE,OAA7B,CAAqC,kBAArC,MAA6D,CAAC,CAAlE,EAAqE;AACnE,cAAM,IAAIP,KAAJ,4CAA8C,KAAKK,OAAL,CAAa,cAAb,CAA9C,EAAN;AACD;;AACD,aAAOG,IAAI,CAACC,KAAL,CAAW,KAAKP,IAAhB,CAAP;AACD","sourcesContent":["import parseHeader from \"./lib/parseHeader.js\";\nimport parseStatus from \"./lib/parseStatus.js\";\nimport parseText from \"./lib/parseText.js\";\nimport type { Version, HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n  body: string = null;\n\n  // bodyUsed: boolean;\n  // redirected: boolean;\n  // trailer: Promise<Headers>;\n  // type: ResponseType;\n  // url: string;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n    lines: [],\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this, line)) parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    if (this.headers[\"content-type\"].indexOf(\"application/json\") === -1) {\n      throw new Error(`Not json response. Content type: ${this.headers[\"content-type\"]}`);\n    }\n    return JSON.parse(this.body);\n  }\n}\n"],"file":"Response.js"}