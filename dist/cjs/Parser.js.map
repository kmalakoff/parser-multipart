{"version":3,"sources":["../../src/Parser.ts"],"names":["ParseStatus","MultipartParser","headers","status","Parts","boundaryEnd","Error","contentType","get","parts","split","type","shift","trim","indexOf","part","boundary","_parsingState","text","line","length","done","push","Part"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;IAGYA,W;;;WAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,2BAAAA,W;;IASSC,e;AAWnB,2BAAYC,OAAZ,EAAuD;AAAA;;AAAA;;AAAA,qCAT9B,EAS8B;;AAAA,mCARvC,EAQuC;;AAAA,2CANV;AAC3CC,MAAAA,MAAM,EAAEH,WAAW,CAACI,KADuB;AAE3CC,MAAAA,WAAW,EAAE;AAF8B,KAMU;;AAAA,sCAFrB,IAEqB;;AACrD,QAAI,CAACH,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAU,iBAAV,CAAN;AAEd,QAAIC,WAAJ;AACA,QAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiCK,WAAW,GAAGL,OAAd;AACjC;AADA,SAC2B,IAAIA,OAAO,CAACM,GAAZ,EAAiBD,WAAW,GAAIL,OAAD,CAAqBM,GAArB,CAAyB,cAAzB,CAAd;AAC5C;AAD2B,SACDD,WAAW,GAAIL,OAAD,CAA2B,cAA3B,CAAd;AAC1B,QAAI,CAACK,WAAL,EAAkB,MAAMD,KAAK,CAAC,+BAAD,CAAX;AAElB,QAAMG,KAAK,GAAGF,WAAW,CAACG,KAAZ,CAAkB,IAAlB,CAAd;AACA,SAAKC,IAAL,GAAYF,KAAK,CAACG,KAAN,GAAcC,IAAd,EAAZ;;AACA,QAAI,KAAKF,IAAL,CAAUG,OAAV,CAAkB,WAAlB,MAAmC,CAAvC,EAA0C;AACxC,YAAM,IAAIR,KAAJ,iDAAmDC,WAAnD,EAAN;AACD;;AAboD,+CAclCE,KAdkC;AAAA;;AAAA;AAcrD;AAAA,YAAWM,IAAX;AAA0B,qCAAY,KAAKb,OAAjB,EAA0Ba,IAA1B,EAAgC,GAAhC;AAA1B,OAdqD,CAgBrD;;AAhBqD;AAAA;AAAA;AAAA;AAAA;;AAiBrD,QAAI,CAAC,KAAKb,OAAL,CAAac,QAAlB,EAA4B,MAAM,IAAIV,KAAJ,CAAU,mCAAV,CAAN;AAC5B,SAAKU,QAAL,eAAqB,KAAKd,OAAL,CAAac,QAAlC;AACA,SAAKC,aAAL,CAAmBZ,WAAnB,eAAsC,KAAKH,OAAL,CAAac,QAAnD;AACA,SAAKC,aAAL,CAAmBd,MAAnB,GAA4BH,WAAW,CAACI,KAAxC;AACD;;;;WAED,gBAAgB;AACd,aAAO,CAAC,KAAKa,aAAb;AACD;;;WAED,eAAMC,IAAN,EAA0B;AACxB,iCAAU,IAAV,EAAgBA,IAAhB;AACD;;;WAED,cAAKC,IAAL,EAAyB;AACvB,UAAMJ,IAAI,GAAG,KAAKN,KAAL,CAAWW,MAAX,GAAoB,KAAKX,KAAL,CAAW,KAAKA,KAAL,CAAWW,MAAX,GAAoB,CAA/B,CAApB,GAAwD,IAArE;AAEA,UAAI,CAAC,KAAKH,aAAV,EAAyB,MAAM,IAAIX,KAAJ,CAAU,2CAAV,CAAN;;AACzB,UAAIa,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAIJ,IAAI,IAAI,CAACA,IAAI,CAACM,IAAL,EAAb,EAA0BN,IAAI,CAACO,IAAL,CAAU,IAAV;AAC1B,aAAKL,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,UAAIE,IAAI,KAAK,KAAKF,aAAL,CAAmBZ,WAAhC,EAA6C,KAAKiB,IAAL,CAAU,IAAV,EAA7C,KACK,IAAIH,IAAI,KAAK,KAAKH,QAAlB,EAA4B;AAC/B,YAAID,IAAI,IAAI,CAACA,IAAI,CAACM,IAAL,EAAb,EAA0BN,IAAI,CAACO,IAAL,CAAU,IAAV;AAC1B,aAAKb,KAAL,CAAWa,IAAX,CAAgB,IAAIC,gBAAJ,EAAhB;AACD,OAHI,MAGE,IAAIR,IAAJ,EAAUA,IAAI,CAACO,IAAL,CAAUH,IAAV,EAAV,KACF;AACH,YAAIA,IAAI,CAACC,MAAT,EAAiB,MAAM,IAAId,KAAJ,4BAA8Ba,IAA9B,EAAN;AAClB;AACF","sourcesContent":["import Part from \"./Part.js\";\nimport parseHeader from \"./lib/parseHeader.js\";\nimport parseText from \"./lib/parseText.js\";\nimport type { HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: HeadersObject = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | HeadersObject) {\n    if (!headers) throw new Error(\"Headers missing\");\n\n    let contentType: string;\n    if (typeof headers === \"string\") contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get(\"content-type\");\n    /* c8 ignore stop */ else contentType = (headers as HeadersObject)[\"content-type\"];\n    if (!contentType) throw Error(\"content-type header not found\");\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf(\"multipart\") !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n    for (const part of parts) parseHeader(this.headers, part, \"=\");\n\n    // boundary\n    if (!this.headers.boundary) throw new Error(\"Invalid Content Type: no boundary\");\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed multipart\");\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n}\n"],"file":"Parser.js"}