{"version":3,"sources":["Response.ts","<<jsx-config-pragma.js>>"],"sourcesContent":["// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseStatus from './lib/parseStatus.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport type { Version, HeadersObject } from './index.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport class BodyHeaders {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n}\n\nexport default class MultipartResponse {\n  contentType: string;\n  headers: BodyHeaders = null;\n  body: string = null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Body,\n    lines: [],\n  };\n\n  constructor(contentType: string) {\n    if (contentType === undefined) throw new Error('Response missing a content type');\n    this.contentType = contentType;\n    if (this.contentType === 'application/http') {\n      this.headers = new BodyHeaders();\n      this._parsingState.status = ParseStatus.Headers;\n    }\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed response');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error('Unexpected parsing state');\n      this.body = this._parsingState.lines.join('\\r\\n');\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this.headers, line)) parseHeader(this.headers.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete response');\n    return JSON.parse(this.body);\n  }\n}\n","React.createElement"],"names":["parseHeader","parseStatus","parseText","ParseStatus","Headers","Body","BodyHeaders","headers","MultipartResponse","contentType","body","_parsingState","status","lines","undefined","Error","done","parse","text","push","line","join","length","json","JSON"],"mappings":"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"}