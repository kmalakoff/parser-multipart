{"version":3,"sources":["../../src/Part.ts"],"names":["parseHeader","parseText","MultipartResponse","ParseStatus","MultipartPart","status","Headers","done","_parsingState","parse","text","push","line","Error","Response","response","length","headers","undefined"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,iBAAP,MAA8B,eAA9B;AAGA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AASZ,eAAe,MAAMC,aAAN,CAAoB;AAAA;AAAA,qCACR,EADQ;;AAAA;;AAAA,2CAIY;AAC3CC,MAAAA,MAAM,EAAEF,WAAW,CAACG;AADuB,KAJZ;AAAA;;AAQjCC,EAAAA,IAAI,GAAY;AACd,WAAO,CAAC,KAAKC,aAAb;AACD;;AAEDC,EAAAA,KAAK,CAACC,IAAD,EAAqB;AACxBT,IAAAA,SAAS,CAAC,IAAD,EAAOS,IAAP,CAAT;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAqB;AACvB,QAAI,CAAC,KAAKJ,aAAV,EAAyB,MAAM,IAAIK,KAAJ,CAAU,sCAAV,CAAN;;AACzB,QAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,UAAI,KAAKJ,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACW,QAA9C,EAAwD,MAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACxD,UAAI,CAAC,KAAKE,QAAL,CAAcR,IAAd,EAAL,EAA2B,KAAKQ,QAAL,CAAcJ,IAAd,CAAmB,IAAnB;AAC3B,WAAKH,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,QAAI,KAAKA,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACG,OAA9C,EAAuD;AACrD,UAAI,CAACM,IAAI,CAACI,MAAV,EAAkB;AAChB,YAAI,KAAKC,OAAL,CAAa,cAAb,MAAiCC,SAArC,EAAgD,MAAM,IAAIL,KAAJ,CAAU,sBAAV,CAAN;AAChD,aAAKL,aAAL,CAAmBH,MAAnB,GAA4BF,WAAW,CAACW,QAAxC;AACA,aAAKC,QAAL,GAAgB,IAAIb,iBAAJ,CAAsB,KAAKe,OAAL,CAAa,cAAb,CAAtB,CAAhB;AACD,OAJD,MAIOjB,WAAW,CAAC,KAAKiB,OAAN,EAAeL,IAAf,EAAqB,GAArB,CAAX;AACR,KAND,MAMO,IAAI,KAAKJ,aAAL,CAAmBH,MAAnB,KAA8BF,WAAW,CAACW,QAA9C,EAAwD;AAC7D,WAAKC,QAAL,CAAcJ,IAAd,CAAmBC,IAAnB;AACD;AACF;;AAlCgC","sourcesContent":["import parseHeader from \"./lib/parseHeader.js\";\nimport parseText from \"./lib/parseText.js\";\nimport MultipartResponse from \"./Response.js\";\nimport type { HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: HeadersObject = {};\n  response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed part\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error(\"Unexpected parsing state\");\n      if (!this.response.done()) this.response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers[\"content-type\"] === undefined) throw new Error(\"Missing content type\");\n        this._parsingState.status = ParseStatus.Response;\n        this.response = new MultipartResponse(this.headers[\"content-type\"]);\n      } else parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this.response.push(line);\n    }\n  }\n}\n"],"file":"Part.js"}