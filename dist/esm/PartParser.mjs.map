{"version":3,"sources":["PartParser.ts"],"sourcesContent":["// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n"],"names":["parseHeader","parseText","MultipartResponse","ParseStatus","Headers","Response","MultipartPart","done","_parsingState","parse","text","push","line","Error","status","_response","length","headers","undefined","response"],"mappings":"AAAA,aAAa;AACb,OAAOA,WAAW,MAAM,sBAAsB,CAAC;AAC/C,aAAa;AACb,OAAOC,SAAS,MAAM,oBAAoB,CAAC;AAC3C,aAAa;AACb,OAAOC,iBAAiB,MAAM,qBAAqB,CAAC;WAE7C,WAGN;UAHWC,WAAW;IAAXA,WAAW,CAAXA,WAAW,CACrBC,SAAO,IAAG,CAAC,IAAXA,SAAO;IADGD,WAAW,CAAXA,WAAW,CAErBE,UAAQ,IAARA,CAAQ,IAARA,UAAQ;GAFEF,WAAW,KAAXA,WAAW;AASR,IAAA,AAAMG,aAAa,GAAnB,MAAMA,aAAa;IAQhCC,IAAI,GAAY;QACd,OAAO,CAAC,IAAI,CAACC,aAAa,CAAC;KAC5B;IAEDC,KAAK,CAACC,IAAY,EAAQ;QACxBT,SAAS,CAAC,IAAI,EAAES,IAAI,CAAC,CAAC;KACvB;IAEDC,IAAI,CAACC,IAAY,EAAQ;QACvB,IAAI,CAAC,IAAI,CAACJ,aAAa,EAAE,MAAM,IAAIK,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACjF,IAAID,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,IAAI,CAACJ,aAAa,CAACM,MAAM,KAAKX,WAAW,CAACE,QAAQ,EAAE,MAAM,IAAIQ,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpG,IAAI,CAAC,IAAI,CAACE,SAAS,CAACR,IAAI,EAAE,EAAE,IAAI,CAACQ,SAAS,CAACJ,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,IAAI,CAACH,aAAa,GAAG,IAAI,CAAC;YAC1B,OAAO;SACR;QAED,IAAI,IAAI,CAACA,aAAa,CAACM,MAAM,KAAKX,WAAW,CAACC,OAAO,EAAE;YACrD,IAAI,CAACQ,IAAI,CAACI,MAAM,EAAE;gBAChB,IAAI,IAAI,CAACC,OAAO,CAAC,cAAc,CAAC,KAAKC,SAAS,EAAE,MAAM,IAAIL,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBACxF,IAAI,CAACL,aAAa,CAACM,MAAM,GAAGX,WAAW,CAACE,QAAQ,CAAC;gBACjD,IAAI,CAACU,SAAS,GAAG,IAAIb,iBAAiB,CAAC,IAAI,CAACe,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;aACtE,MAAMjB,WAAW,CAAC,IAAI,CAACiB,OAAO,EAAEL,IAAI,EAAE,GAAG,CAAC,CAAC;SAC7C,MAAM,IAAI,IAAI,CAACJ,aAAa,CAACM,MAAM,KAAKX,WAAW,CAACE,QAAQ,EAAE;YAC7D,IAAI,CAACU,SAAS,CAACJ,IAAI,CAACC,IAAI,CAAC,CAAC;SAC3B;KACF;IAED,IAAIO,QAAQ,GAAa;QACvB,IAAI,IAAI,CAACX,aAAa,EAAE,MAAM,IAAIK,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAChF,OAAO,IAAI,CAACE,SAAS,CAACI,QAAQ,CAAC;KAChC;;QAtCDF,KAAAA,OAAO,GAA2B,EAAE,AAAC,CAAA;QAGrC,KAAQT,aAAa,GAAwB;YAC3CM,MAAM,EAAEX,WAAW,CAACC,OAAO;SAC5B,AAAC,CAAA;;CAkCH;AAxCD,SAAqBE,aAAa,cAwCjC"}