{"version":3,"sources":["PartParser.ts"],"sourcesContent":["// @ts-ignore\nimport MultipartResponse from './ResponseParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Headers = 1,\n  Response = 2,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n}\n\nexport default class MultipartPart {\n  headers: Record<string, string> = {};\n  _response: MultipartResponse | null;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error('Attempting to parse a completed part');\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Response) throw new Error('Unexpected parsing state');\n      if (!this._response.done()) this._response.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) {\n        if (this.headers['content-type'] === undefined) throw new Error('Missing content type');\n        this._parsingState.status = ParseStatus.Response;\n        this._response = new MultipartResponse(this.headers['content-type']);\n      } else parseHeader(this.headers, line, ':');\n    } else if (this._parsingState.status === ParseStatus.Response) {\n      this._response.push(line);\n    }\n  }\n\n  get response(): Response {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete part');\n    return this._response.response;\n  }\n}\n"],"names":["MultipartResponse","parseHeader","parseText","ParseStatus","MultipartPart","done","_parsingState","parse","text","push","line","Error","status","_response","length","headers","undefined","response"],"mappings":"AAAA,aAAa;;;;;;;;;;;;;;AACb,OAAOA,uBAAuB,sBAAsB;AACpD,aAAa;AACb,OAAOC,iBAAiB,uBAAuB;AAC/C,aAAa;AACb,OAAOC,eAAe,qBAAqB;;UAE/BC;;;GAAAA,gBAAAA;AASG,IAAA,AAAMC,gBAAN,MAAMA;IAQnBC,OAAgB;QACd,OAAO,CAAC,IAAI,CAACC,aAAa;IAC5B;IAEAC,MAAMC,IAAY,EAAQ;QACxBN,UAAU,IAAI,EAAEM;IAClB;IAEAC,KAAKC,IAAY,EAAQ;QACvB,IAAI,CAAC,IAAI,CAACJ,aAAa,EAAE,MAAM,IAAIK,MAAM;QACzC,IAAID,SAAS,MAAM;YACjB,IAAI,IAAI,CAACJ,aAAa,CAACM,MAAM,QAA2B,MAAM,IAAID,MAAM;YACxE,IAAI,CAAC,IAAI,CAACE,SAAS,CAACR,IAAI,IAAI,IAAI,CAACQ,SAAS,CAACJ,IAAI,CAAC;YAChD,IAAI,CAACH,aAAa,GAAG;YACrB;QACF;QAEA,IAAI,IAAI,CAACA,aAAa,CAACM,MAAM,QAA0B;YACrD,IAAI,CAACF,KAAKI,MAAM,EAAE;gBAChB,IAAI,IAAI,CAACC,OAAO,CAAC,eAAe,KAAKC,WAAW,MAAM,IAAIL,MAAM;gBAChE,IAAI,CAACL,aAAa,CAACM,MAAM;gBACzB,IAAI,CAACC,SAAS,GAAG,IAAIb,kBAAkB,IAAI,CAACe,OAAO,CAAC,eAAe;YACrE,OAAOd,YAAY,IAAI,CAACc,OAAO,EAAEL,MAAM;QACzC,OAAO,IAAI,IAAI,CAACJ,aAAa,CAACM,MAAM,QAA2B;YAC7D,IAAI,CAACC,SAAS,CAACJ,IAAI,CAACC;QACtB;IACF;IAEA,IAAIO,WAAqB;QACvB,IAAI,IAAI,CAACX,aAAa,EAAE,MAAM,IAAIK,MAAM;QACxC,OAAO,IAAI,CAACE,SAAS,CAACI,QAAQ;IAChC;;QAtCAF,uBAAAA,WAAkC,CAAC;QACnCF,uBAAAA,aAAAA,KAAAA;QAEA,uBAAQP,iBAAqC;YAC3CM,MAAM;QACR;;AAkCF;AAxCA,SAAqBR,2BAwCpB"}