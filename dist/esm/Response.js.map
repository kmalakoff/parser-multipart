{"version":3,"sources":["../../src/Response.ts"],"names":["parseHeader","parseStatus","parseText","ParseStatus","MultipartResponse","status","Headers","lines","done","_parsingState","parse","text","push","line","Error","Body","body","join","length","headers","json","indexOf","JSON"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AAGA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W,CAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AAUZ,eAAe,MAAMC,iBAAN,CAAwB;AAAA;AAAA;;AAAA,qCAEZ,EAFY;;AAAA;;AAAA;;AAAA;;AAAA,kCAMtB,IANsB;;AAAA,2CAcQ;AAC3CC,MAAAA,MAAM,EAAEF,WAAW,CAACG,OADuB;AAE3CC,MAAAA,KAAK,EAAE;AAFoC,KAdR;AAAA;;AAmBrCC,EAAAA,IAAI,GAAY;AACd,WAAO,CAAC,KAAKC,aAAb;AACD;;AAEDC,EAAAA,KAAK,CAACC,IAAD,EAAqB;AACxBT,IAAAA,SAAS,CAAC,IAAD,EAAOS,IAAP,CAAT;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAqB;AACvB,QAAI,CAAC,KAAKJ,aAAV,EAAyB,MAAM,IAAIK,KAAJ,CAAU,0CAAV,CAAN;;AACzB,QAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,UAAI,KAAKJ,aAAL,CAAmBJ,MAAnB,KAA8BF,WAAW,CAACY,IAA9C,EAAoD,MAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACpD,WAAKE,IAAL,GAAY,KAAKP,aAAL,CAAmBF,KAAnB,CAAyBU,IAAzB,CAA8B,MAA9B,CAAZ;AACA,WAAKR,aAAL,GAAqB,IAArB;AACA;AACD;;AAED,QAAI,KAAKA,aAAL,CAAmBJ,MAAnB,KAA8BF,WAAW,CAACG,OAA9C,EAAuD;AACrD,UAAI,CAACO,IAAI,CAACK,MAAV,EAAkB,KAAKT,aAAL,CAAmBJ,MAAnB,GAA4BF,WAAW,CAACY,IAAxC,CAAlB,KACK,IAAI,CAACd,WAAW,CAAC,IAAD,EAAOY,IAAP,CAAhB,EAA8Bb,WAAW,CAAC,KAAKmB,OAAN,EAAeN,IAAf,EAAqB,GAArB,CAAX;AACpC,KAHD,MAGO,IAAI,KAAKJ,aAAL,CAAmBJ,MAAnB,KAA8BF,WAAW,CAACY,IAA9C,EAAoD;AACzD,UAAI,CAACF,IAAI,CAACK,MAAV,EAAkB,KAAKN,IAAL,CAAU,IAAV,EAAlB,KACK,KAAKH,aAAL,CAAmBF,KAAnB,CAAyBK,IAAzB,CAA8BC,IAA9B;AACN;AACF;;AAEDF,EAAAA,IAAI,GAAW;AACb,QAAI,KAAKF,aAAT,EAAwB,MAAM,IAAIK,KAAJ,CAAU,0CAAV,CAAN;AACxB,WAAO,KAAKE,IAAZ;AACD;;AAEDI,EAAAA,IAAI,GAAY;AACd,QAAI,KAAKX,aAAT,EAAwB,MAAM,IAAIK,KAAJ,CAAU,0CAAV,CAAN;;AACxB,QAAI,KAAKK,OAAL,CAAa,cAAb,EAA6BE,OAA7B,CAAqC,kBAArC,MAA6D,CAAC,CAAlE,EAAqE;AACnE,YAAM,IAAIP,KAAJ,CAAW,oCAAmC,KAAKK,OAAL,CAAa,cAAb,CAA6B,EAA3E,CAAN;AACD;;AACD,WAAOG,IAAI,CAACZ,KAAL,CAAW,KAAKM,IAAhB,CAAP;AACD;;AAxDoC","sourcesContent":["import parseHeader from \"./lib/parseHeader.js\";\nimport parseStatus from \"./lib/parseStatus.js\";\nimport parseText from \"./lib/parseText.js\";\nimport type { Version, HeadersObject } from \"./index.js\";\n\nexport enum ParseStatus {\n  Headers = 1,\n  Body,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  lines: string[];\n}\n\nexport default class MultipartResponse {\n  version: Version;\n  headers: HeadersObject = {};\n  ok: boolean;\n  status: number;\n  statusText: string;\n  body: string = null;\n\n  // bodyUsed: boolean;\n  // redirected: boolean;\n  // trailer: Promise<Headers>;\n  // type: ResponseType;\n  // url: string;\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Headers,\n    lines: [],\n  };\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): void {\n    parseText(this, text);\n  }\n\n  push(line: string): void {\n    if (!this._parsingState) throw new Error(\"Attempting to parse a completed response\");\n    if (line === null) {\n      if (this._parsingState.status !== ParseStatus.Body) throw new Error(\"Unexpected parsing state\");\n      this.body = this._parsingState.lines.join(\"\\r\\n\");\n      this._parsingState = null;\n      return;\n    }\n\n    if (this._parsingState.status === ParseStatus.Headers) {\n      if (!line.length) this._parsingState.status = ParseStatus.Body;\n      else if (!parseStatus(this, line)) parseHeader(this.headers, line, \":\");\n    } else if (this._parsingState.status === ParseStatus.Body) {\n      if (!line.length) this.push(null);\n      else this._parsingState.lines.push(line);\n    }\n  }\n\n  text(): string {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    return this.body;\n  }\n\n  json(): unknown {\n    if (this._parsingState) throw new Error(\"Attempting to use an incomplete response\");\n    if (this.headers[\"content-type\"].indexOf(\"application/json\") === -1) {\n      throw new Error(`Not json response. Content type: ${this.headers[\"content-type\"]}`);\n    }\n    return JSON.parse(this.body);\n  }\n}\n"],"file":"Response.js"}