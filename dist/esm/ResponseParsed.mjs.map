{"version":3,"sources":["ResponseParsed.ts"],"sourcesContent":["// @ts-ignore\nimport BodyHeaders from './lib/BodyHeaders.js';\n// @ts-ignore\nimport HeadersPolyfill from './lib/HeadersPolyfill.ts';\n\nexport interface Parser {\n  headers: BodyHeaders;\n  body: string;\n}\n\nexport default class ParsedResponse implements Response {\n  private _parser: Parser;\n  private _bodyUsed: boolean;\n\n  constructor(parser: Parser) {\n    this._parser = parser;\n    this._bodyUsed = false;\n  }\n\n  get type(): ResponseType {\n    return 'default';\n  }\n  get headers() {\n    return new HeadersPolyfill(this._parser.headers.headers as unknown as Record<string, string>);\n  }\n\n  get body(): ReadableStream<Uint8Array> {\n    throw new Error('Not supported: body');\n  }\n\n  get ok() {\n    return this._parser.headers.ok;\n  }\n  get status() {\n    return this._parser.headers.status;\n  }\n  get statusText() {\n    return this._parser.headers.statusText;\n  }\n  get redirected() {\n    return false;\n  }\n  get url() {\n    return '';\n  }\n  clone() {\n    return new ParsedResponse(this._parser);\n  }\n  get bodyUsed() {\n    return this._bodyUsed;\n  }\n\n  text(): Promise<string> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(this._parser.body);\n  }\n\n  json(): Promise<unknown> {\n    if (this._bodyUsed) throw new Error('Body already consumed');\n    this._bodyUsed = true;\n    return Promise.resolve(JSON.parse(this._parser.body));\n  }\n\n  arrayBuffer(): Promise<ArrayBuffer> {\n    throw new Error('Unsupported: arrayBuffer');\n  }\n\n  blob(): Promise<Blob> {\n    throw new Error('Unsupported: blob');\n  }\n\n  formData(): Promise<FormData> {\n    throw new Error('Unsupported: formData');\n  }\n}\n"],"names":["HeadersPolyfill","ParsedResponse","type","headers","_parser","body","Error","ok","status","statusText","redirected","url","clone","bodyUsed","_bodyUsed","text","Promise","resolve","json","JSON","parse","arrayBuffer","blob","formData","constructor","parser"],"mappings":"AAAA,aAAa;AAEb,aAAa;AACb,OAAOA,eAAe,MAAM,0BAA0B,CAAC;AAOxC,IAAA,AAAMC,cAAc,GAApB,MAAMA,cAAc;IASjC,IAAIC,IAAI,GAAiB;QACvB,OAAO,SAAS,CAAC;KAClB;IACD,IAAIC,OAAO,GAAG;QACZ,OAAO,IAAIH,eAAe,CAAC,IAAI,CAACI,OAAO,CAACD,OAAO,CAACA,OAAO,CAAsC,CAAC;KAC/F;IAED,IAAIE,IAAI,GAA+B;QACrC,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAC;KACxC;IAED,IAAIC,EAAE,GAAG;QACP,OAAO,IAAI,CAACH,OAAO,CAACD,OAAO,CAACI,EAAE,CAAC;KAChC;IACD,IAAIC,MAAM,GAAG;QACX,OAAO,IAAI,CAACJ,OAAO,CAACD,OAAO,CAACK,MAAM,CAAC;KACpC;IACD,IAAIC,UAAU,GAAG;QACf,OAAO,IAAI,CAACL,OAAO,CAACD,OAAO,CAACM,UAAU,CAAC;KACxC;IACD,IAAIC,UAAU,GAAG;QACf,OAAO,KAAK,CAAC;KACd;IACD,IAAIC,GAAG,GAAG;QACR,OAAO,EAAE,CAAC;KACX;IACDC,KAAK,GAAG;QACN,OAAO,IAAIX,cAAc,CAAC,IAAI,CAACG,OAAO,CAAC,CAAC;KACzC;IACD,IAAIS,QAAQ,GAAG;QACb,OAAO,IAAI,CAACC,SAAS,CAAC;KACvB;IAEDC,IAAI,GAAoB;QACtB,IAAI,IAAI,CAACD,SAAS,EAAE,MAAM,IAAIR,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7D,IAAI,CAACQ,SAAS,GAAG,IAAI,CAAC;QACtB,OAAOE,OAAO,CAACC,OAAO,CAAC,IAAI,CAACb,OAAO,CAACC,IAAI,CAAC,CAAC;KAC3C;IAEDa,IAAI,GAAqB;QACvB,IAAI,IAAI,CAACJ,SAAS,EAAE,MAAM,IAAIR,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7D,IAAI,CAACQ,SAAS,GAAG,IAAI,CAAC;QACtB,OAAOE,OAAO,CAACC,OAAO,CAACE,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChB,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;KACvD;IAEDgB,WAAW,GAAyB;QAClC,MAAM,IAAIf,KAAK,CAAC,0BAA0B,CAAC,CAAC;KAC7C;IAEDgB,IAAI,GAAkB;QACpB,MAAM,IAAIhB,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACtC;IAEDiB,QAAQ,GAAsB;QAC5B,MAAM,IAAIjB,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IA5DDkB,YAAYC,MAAc,CAAE;QAC1B,IAAI,CAACrB,OAAO,GAAGqB,MAAM,CAAC;QACtB,IAAI,CAACX,SAAS,GAAG,KAAK,CAAC;KACxB;CA0DF;AAjED,SAAqBb,cAAc,cAiElC"}