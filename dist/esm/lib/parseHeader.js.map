{"version":3,"sources":["../../../src/lib/parseHeader.ts"],"names":["parseHeader","result","line","delimiter","index","indexOf","Error","key","slice","value","trim","toLowerCase"],"mappings":"AAEA,eAAe,SAASA,WAAT,CAAqBC,MAArB,EAA4CC,IAA5C,EAA0DC,SAA1D,EAAmF;AAChG,QAAMC,KAAK,GAAGF,IAAI,CAACG,OAAL,CAAaF,SAAb,CAAd;AACA,MAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB,MAAM,IAAIE,KAAJ,CAAW,6BAA4BJ,IAAK,EAA5C,CAAN;AAClB,QAAMK,GAAG,GAAGL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcJ,KAAd,CAAZ;AACA,QAAMK,KAAK,GAAGP,IAAI,CAACM,KAAL,CAAWJ,KAAK,GAAG,CAAnB,CAAd;AACAH,EAAAA,MAAM,CAACM,GAAG,CAACG,IAAJ,GAAWC,WAAX,EAAD,CAAN,GAAmCF,KAAK,CAACC,IAAN,EAAnC;AACD","sourcesContent":["import { HeadersObject } from \"../index\";\n\nexport default function parseHeader(result: HeadersObject, line: string, delimiter: string): void {\n  const index = line.indexOf(delimiter);\n  if (index === -1) throw new Error(`Unexpected header format: ${line}`);\n  const key = line.slice(0, index);\n  const value = line.slice(index + 1);\n  result[key.trim().toLowerCase()] = value.trim();\n}\n"],"file":"parseHeader.js"}