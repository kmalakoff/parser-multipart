{"version":3,"sources":["MultipartParser.ts"],"sourcesContent":["// @ts-ignore\nimport Part from './PartParser.ts';\n// @ts-ignore\nimport parseHeader from './lib/parseHeader.ts';\n// @ts-ignore\nimport parseText from './lib/parseText.ts';\n\nexport enum ParseStatus {\n  Parts = 1,\n}\n\nexport interface ParsingState {\n  status: ParseStatus;\n  boundaryEnd: string | null;\n}\n\nexport default class MultipartParser {\n  type: string;\n  headers: Record<string, string> = {};\n  parts: Part[] = [];\n\n  private _parsingState: ParsingState | null = {\n    status: ParseStatus.Parts,\n    boundaryEnd: null,\n  };\n  private boundary: string | null = null;\n\n  constructor(headers: Headers | string | Record<string, string>) {\n    if (!headers) throw new Error('Headers missing');\n\n    let contentType: string;\n    if (typeof headers === 'string') contentType = headers;\n    /* c8 ignore start */ else if (headers.get) contentType = (headers as Headers).get('content-type');\n    /* c8 ignore stop */ else contentType = (headers as Record<string, string>)['content-type'];\n    if (!contentType) throw Error('content-type header not found');\n\n    const parts = contentType.split(/;/g);\n    this.type = parts.shift().trim();\n    if (this.type.indexOf('multipart') !== 0) {\n      throw new Error(`Expecting a multipart type. Received: ${contentType}`);\n    }\n\n    parts.forEach((part) => parseHeader(this.headers, part, '='));\n\n    // boundary\n    if (!this.headers.boundary) throw new Error('Invalid Content Type: no boundary');\n    this.boundary = `--${this.headers.boundary}`;\n    this._parsingState.boundaryEnd = `--${this.headers.boundary}--`;\n    this._parsingState.status = ParseStatus.Parts;\n  }\n\n  done(): boolean {\n    return !this._parsingState;\n  }\n\n  parse(text: string): MultipartParser {\n    parseText(this, text);\n    return this;\n  }\n\n  push(line: string): void {\n    const part = this.parts.length ? this.parts[this.parts.length - 1] : null;\n\n    if (!this._parsingState) throw new Error('Attempting to parse a completed multipart');\n    if (line === null) {\n      if (part && !part.done()) part.push(null);\n      this._parsingState = null;\n      return;\n    }\n\n    if (line === this._parsingState.boundaryEnd) this.push(null);\n    else if (line === this.boundary) {\n      if (part && !part.done()) part.push(null);\n      this.parts.push(new Part());\n    } else if (part) part.push(line);\n    else {\n      if (line.length) throw new Error(`Unexpected line: ${line}`);\n    }\n  }\n\n  get responses(): Response[] {\n    if (this._parsingState) throw new Error('Attempting to use an incomplete parser');\n    return this.parts.map((part) => part.response);\n  }\n}\n"],"names":["Part","parseHeader","parseText","ParseStatus","MultipartParser","done","_parsingState","parse","text","push","line","part","parts","length","Error","boundaryEnd","boundary","responses","map","response","constructor","headers","type","status","contentType","get","split","shift","trim","indexOf","forEach"],"mappings":"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"}